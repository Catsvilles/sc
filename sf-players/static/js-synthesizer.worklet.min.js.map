{"version":3,"file":"js-synthesizer.worklet.min.js","mappings":"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","sources":["webpack://js-synthesizer/./src/main/MIDIEvent.ts","webpack://js-synthesizer/./src/main/SequencerEventData.ts","webpack://js-synthesizer/./src/main/PointerType.ts","webpack://js-synthesizer/./src/main/ISequencerEventData.ts","webpack://js-synthesizer/./src/main/Sequencer.ts","webpack://js-synthesizer/./src/main/Soundfont.ts","webpack://js-synthesizer/./src/main/Synthesizer.ts","webpack://js-synthesizer/./src/main/MessageError.ts","webpack://js-synthesizer/./src/main/MethodMessaging.ts","webpack://js-synthesizer/./src/main/registerAudioWorkletProcessor.ts","webpack://js-synthesizer/./src/main/waitForReady.ts","webpack://js-synthesizer/./src/main/workletEntry.ts"],"sourcesContent":["\nimport IMIDIEvent from './IMIDIEvent';\nimport PointerType, { UniquePointerType } from './PointerType';\n\n/** @internal */\nexport type MIDIEventType = UniquePointerType<'midi_event'>;\n\n/** @internal */\nexport default class MIDIEvent implements IMIDIEvent {\n\n\t/** @internal */\n\tconstructor(private _ptr: MIDIEventType, private _module: any) {\n\t}\n\n\tpublic getType(): number {\n\t\treturn this._module._fluid_midi_event_get_type(this._ptr);\n\t}\n\tpublic setType(value: number): void {\n\t\tthis._module._fluid_midi_event_set_type(this._ptr, value);\n\t}\n\tpublic getChannel(): number {\n\t\treturn this._module._fluid_midi_event_get_channel(this._ptr);\n\t}\n\tpublic setChannel(value: number): void {\n\t\tthis._module._fluid_midi_event_set_channel(this._ptr, value);\n\t}\n\tpublic getKey(): number {\n\t\treturn this._module._fluid_midi_event_get_key(this._ptr);\n\t}\n\tpublic setKey(value: number): void {\n\t\tthis._module._fluid_midi_event_set_key(this._ptr, value);\n\t}\n\tpublic getVelocity(): number {\n\t\treturn this._module._fluid_midi_event_get_velocity(this._ptr);\n\t}\n\tpublic setVelocity(value: number): void {\n\t\tthis._module._fluid_midi_event_set_velocity(this._ptr, value);\n\t}\n\tpublic getControl(): number {\n\t\treturn this._module._fluid_midi_event_get_control(this._ptr);\n\t}\n\tpublic setControl(value: number): void {\n\t\tthis._module._fluid_midi_event_set_control(this._ptr, value);\n\t}\n\tpublic getValue(): number {\n\t\treturn this._module._fluid_midi_event_get_value(this._ptr);\n\t}\n\tpublic setValue(value: number): void {\n\t\tthis._module._fluid_midi_event_set_value(this._ptr, value);\n\t}\n\tpublic getProgram(): number {\n\t\treturn this._module._fluid_midi_event_get_program(this._ptr);\n\t}\n\tpublic setProgram(value: number): void {\n\t\tthis._module._fluid_midi_event_set_program(this._ptr, value);\n\t}\n\tpublic getPitch(): number {\n\t\treturn this._module._fluid_midi_event_get_pitch(this._ptr);\n\t}\n\tpublic setPitch(value: number): void {\n\t\tthis._module._fluid_midi_event_set_pitch(this._ptr, value);\n\t}\n\n\tpublic setSysEx(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_sysex(this._ptr, ptr, size, 1);\n\t}\n\tpublic setText(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_text(this._ptr, ptr, size, 1);\n\t}\n\tpublic setLyrics(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_lyrics(this._ptr, ptr, size, 1);\n\t}\n}\n","\nimport { EventType } from './SequencerEvent';\nimport ISequencerEventData from './ISequencerEventData';\nimport PointerType, { INVALID_POINTER } from './PointerType';\n\n/** @internal */\nexport default class SequencerEventData implements ISequencerEventData {\n\t/** @internal */\n\tconstructor(private _ptr: PointerType, private _module: any) {\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._ptr;\n\t}\n\n\t/** @internal */\n\tpublic dispose() {\n\t\tthis._ptr = INVALID_POINTER;\n\t}\n\n\tpublic getType(): EventType {\n\t\tif (this._ptr === INVALID_POINTER) return -1 as any as EventType;\n\t\treturn this._module._fluid_event_get_type(this._ptr);\n\t}\n\tpublic getSource(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_source(this._ptr);\n\t}\n\tpublic getDest(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_dest(this._ptr);\n\t}\n\tpublic getChannel(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_channel(this._ptr);\n\t}\n\tpublic getKey(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_key(this._ptr);\n\t}\n\tpublic getVelocity(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_velocity(this._ptr);\n\t}\n\tpublic getControl(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_control(this._ptr);\n\t}\n\tpublic getValue(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_value(this._ptr);\n\t}\n\tpublic getProgram(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_program(this._ptr);\n\t}\n\tpublic getData(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_data(this._ptr);\n\t}\n\tpublic getDuration(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_duration(this._ptr);\n\t}\n\tpublic getBank(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_bank(this._ptr);\n\t}\n\tpublic getPitch(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_pitch(this._ptr);\n\t}\n\tpublic getSFontId(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_sfont_id(this._ptr);\n\t}\n}\n","\ntype NullPointerType = number & { _null_pointer_marker: never; };\n\n/** @internal */\ntype PointerType = NullPointerType | (number & { _pointer_marker: never; });\n\nexport default PointerType;\n\ntype UniquePointerType<TMarker extends string> = NullPointerType | (number & {\n\t_pointer_marker: never;\n} & {\n\t[P in TMarker]: never;\n});\nexport { UniquePointerType };\n\nexport const INVALID_POINTER: NullPointerType = 0 as any as NullPointerType;\n","\nimport SequencerEvent, { EventType } from './SequencerEvent';\n\n/** @internal */\nimport PointerType, { INVALID_POINTER } from './PointerType';\n/** @internal */\nimport SequencerEventData from './SequencerEventData';\n\nconst _module: any = typeof AudioWorkletGlobalScope !== 'undefined' ?\n\tAudioWorkletGlobalScope.wasmModule : Module;\n\n/** Event data for sequencer callback. Only available in the callback function due to the instance lifetime. */\nexport default interface ISequencerEventData {\n\t/** Returns the event type */\n\tgetType(): EventType;\n\t/** Returns the source client id of event */\n\tgetSource(): number;\n\t/** Returns the destination client id of event */\n\tgetDest(): number;\n\tgetChannel(): number;\n\tgetKey(): number;\n\tgetVelocity(): number;\n\tgetControl(): number;\n\tgetValue(): number;\n\tgetProgram(): number;\n\tgetData(): number;\n\tgetDuration(): number;\n\tgetBank(): number;\n\tgetPitch(): number;\n\tgetSFontId(): number;\n}\n\n/** @internal */\nexport function rewriteEventDataImpl(ev: PointerType, event: SequencerEvent): boolean {\n\tswitch (event.type) {\n\t\tcase EventType.Note:\n\t\tcase 'note':\n\t\t\t_module._fluid_event_note(ev, event.channel, event.key, event.vel, event.duration);\n\t\t\tbreak;\n\t\tcase EventType.NoteOn:\n\t\tcase 'noteon':\n\t\tcase 'note-on':\n\t\t\t_module._fluid_event_noteon(ev, event.channel, event.key, event.vel);\n\t\t\tbreak;\n\t\tcase EventType.NoteOff:\n\t\tcase 'noteoff':\n\t\tcase 'note-off':\n\t\t\t_module._fluid_event_noteoff(ev, event.channel, event.key);\n\t\t\tbreak;\n\t\tcase EventType.AllSoundsOff:\n\t\tcase 'allsoundsoff':\n\t\tcase 'all-sounds-off':\n\t\t\t_module._fluid_event_all_sounds_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.AllNotesOff:\n\t\tcase 'allnotesoff':\n\t\tcase 'all-notes-off':\n\t\t\t_module._fluid_event_all_notes_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.BankSelect:\n\t\tcase 'bankselect':\n\t\tcase 'bank-select':\n\t\t\t_module._fluid_event_bank_select(ev, event.channel, event.bank);\n\t\t\tbreak;\n\t\tcase EventType.ProgramChange:\n\t\tcase 'programchange':\n\t\tcase 'program-change':\n\t\t\t_module._fluid_event_program_change(ev, event.channel, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ProgramSelect:\n\t\tcase 'programselect':\n\t\tcase 'program-select':\n\t\t\t_module._fluid_event_program_select(ev, event.channel, event.sfontId, event.bank, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ControlChange:\n\t\tcase 'controlchange':\n\t\tcase 'control-change':\n\t\t\t_module._fluid_event_control_change(ev, event.channel, event.control, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchBend:\n\t\tcase 'pitchbend':\n\t\tcase 'pitch-bend':\n\t\t\t_module._fluid_event_pitch_bend(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchWheelSensitivity:\n\t\tcase 'pitchwheelsens':\n\t\tcase 'pitchwheelsensitivity':\n\t\tcase 'pitch-wheel-sens':\n\t\tcase 'pitch-wheel-sensitivity':\n\t\t\t_module._fluid_event_pitch_wheelsens(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Modulation:\n\t\tcase 'modulation':\n\t\t\t_module._fluid_event_modulation(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Sustain:\n\t\tcase 'sustain':\n\t\t\t_module._fluid_event_sustain(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Pan:\n\t\tcase 'pan':\n\t\t\t_module._fluid_event_pan(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Volume:\n\t\tcase 'volume':\n\t\t\t_module._fluid_event_volume(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ReverbSend:\n\t\tcase 'reverb':\n\t\tcase 'reverbsend':\n\t\tcase 'reverb-send':\n\t\t\t_module._fluid_event_reverb_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChorusSend:\n\t\tcase 'chorus':\n\t\tcase 'chorussend':\n\t\tcase 'chorus-send':\n\t\t\t_module._fluid_event_chorus_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.KeyPressure:\n\t\tcase 'keypressure':\n\t\tcase 'key-pressure':\n\t\tcase 'aftertouch':\n\t\t\t_module._fluid_event_key_pressure(ev, event.channel, event.key, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChannelPressure:\n\t\tcase 'channelpressure':\n\t\tcase 'channel-pressure':\n\t\tcase 'channel-aftertouch':\n\t\t\t_module._fluid_event_channel_pressure(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.SystemReset:\n\t\tcase 'systemreset':\n\t\tcase 'system-reset':\n\t\t\t_module._fluid_event_system_reset(ev);\n\t\t\tbreak;\n\t\tcase EventType.Timer:\n\t\tcase 'timer':\n\t\t\t_module._fluid_event_timer(ev, event.data);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// 'typeof event' must be 'never' here\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Rewrites event data with specified SequencerEvent object.\n * @param data destination instance\n * @param event source data\n * @return true if succeeded\n */\nexport function rewriteEventData(data: ISequencerEventData, event: SequencerEvent): boolean {\n\tif (!data || !(data instanceof SequencerEventData)) {\n\t\treturn false;\n\t}\n\tconst ev = data.getRaw();\n\tif (ev === INVALID_POINTER) {\n\t\treturn false;\n\t}\n\treturn rewriteEventDataImpl(ev, event);\n}\n","\nimport ISequencer, { ClientInfo } from './ISequencer';\nimport ISequencerEventData, { rewriteEventDataImpl } from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SequencerEvent from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\n\nimport Synthesizer from './Synthesizer';\n\ntype SequencerPointer = UniquePointerType<'sequencer_ptr'>;\ntype SequencerId = number;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction removeFunction(funcPtr: number): void;\n}\n\nlet _module: any;\nlet _removeFunction: (funcPtr: number) => void;\n\nlet fluid_sequencer_get_client_name: (seq: number, id: number) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_removeFunction = removeFunction;\n\t}\n\n\tfluid_sequencer_get_client_name =\n\t\t_module.cwrap('fluid_sequencer_get_client_name', 'string', ['number', 'number']);\n}\n\nfunction makeEvent(event: SequencerEvent): PointerType | null {\n\tconst ev = _module._new_fluid_event();\n\tif (!rewriteEventDataImpl(ev, event)) {\n\t\t_module._delete_fluid_event(ev);\n\t\treturn null;\n\t}\n\treturn ev;\n}\n\n/** @internal */\nexport default class Sequencer implements ISequencer {\n\n\tprivate _seq: SequencerPointer;\n\tprivate _seqId: SequencerId;\n\n\t/** @internal */\n\tpublic _clientFuncMap: { [id: number]: number };\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._seq = INVALID_POINTER;\n\t\tthis._seqId = -1;\n\t\tthis._clientFuncMap = {};\n\t}\n\n\t/** @internal */\n\tpublic _initialize(): Promise<void> {\n\t\tthis.close();\n\t\tthis._seq = _module._new_fluid_sequencer2(0);\n\t\tthis._seqId = -1;\n\t\treturn Promise.resolve();\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._seq;\n\t}\n\n\tpublic close() {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\tObject.keys(this._clientFuncMap).forEach((clientIdStr) => {\n\t\t\t\tthis.unregisterClient(Number(clientIdStr));\n\t\t\t});\n\t\t\tthis.unregisterClient(-1);\n\t\t\t_module._delete_fluid_sequencer(this._seq);\n\t\t\tthis._seq = INVALID_POINTER;\n\t\t}\n\t}\n\n\tpublic registerSynthesizer(synth: ISynthesizer | number): Promise<number> {\n\t\tif (this._seqId !== -1) {\n\t\t\t_module._fluid_sequencer_unregister_client(this._seq, this._seqId);\n\t\t\tthis._seqId = -1;\n\t\t}\n\t\tlet val: number;\n\t\tif (typeof synth === 'number') {\n\t\t\tval = synth;\n\t\t} else if (synth instanceof Synthesizer) {\n\t\t\tval = synth.getRawSynthesizer();\n\t\t} else {\n\t\t\treturn Promise.reject(new TypeError('\\'synth\\' is not a compatible type instance'));\n\t\t}\n\n\t\tthis._seqId = _module._fluid_sequencer_register_fluidsynth(this._seq, val);\n\t\treturn Promise.resolve(this._seqId);\n\t}\n\n\tpublic unregisterClient(clientId: number): void {\n\t\tif (clientId === -1) {\n\t\t\tclientId = this._seqId;\n\t\t\tif (clientId === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// send 'unregistering' event\n\t\tconst ev = _module._new_fluid_event();\n\t\t_module._fluid_event_set_source(ev, -1);\n\t\t_module._fluid_event_set_dest(ev, clientId);\n\t\t_module._fluid_event_unregistering(ev);\n\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t_module._delete_fluid_event(ev);\n\n\t\t_module._fluid_sequencer_unregister_client(this._seq, clientId);\n\t\tif (this._seqId === clientId) {\n\t\t\tthis._seqId = -1;\n\t\t} else {\n\t\t\tconst map = this._clientFuncMap;\n\t\t\tif (map[clientId]) {\n\t\t\t\t_removeFunction(map[clientId]);\n\t\t\t\tdelete map[clientId];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getAllRegisteredClients(): Promise<ClientInfo[]> {\n\t\tconst c = _module._fluid_sequencer_count_clients(this._seq);\n\t\tconst r: ClientInfo[] = [];\n\t\tfor (let i = 0; i < c; ++i) {\n\t\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\t\tr.push({ clientId: id, name: name });\n\t\t}\n\t\treturn Promise.resolve(r);\n\t}\n\n\tpublic getClientCount(): Promise<number> {\n\t\treturn Promise.resolve<number>(_module._fluid_sequencer_count_clients(this._seq));\n\t}\n\n\tpublic getClientInfo(index: number): Promise<ClientInfo> {\n\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, index);\n\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\treturn Promise.resolve<ClientInfo>({ clientId: id, name: name });\n\t}\n\n\tpublic setTimeScale(scale: number): void {\n\t\t_module._fluid_sequencer_set_time_scale(this._seq, scale);\n\t}\n\n\tpublic getTimeScale(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_time_scale(this._seq));\n\t}\n\n\tpublic getTick(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_tick(this._seq));\n\t}\n\n\tpublic sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t// send to all clients\n\t\t\tconst count = _module._fluid_sequencer_count_clients(this._seq);\n\t\t\tfor (let i = 0; i < count; ++i) {\n\t\t\t\tconst id: number = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\t\t_module._fluid_event_set_dest(ev, id);\n\t\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t}\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\tpublic sendEventToClientAt(clientId: number, event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventToClientNow(clientId: number, event: SequencerEvent): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventNow(clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(eventData instanceof SequencerEventData)) {\n\t\t\treturn;\n\t\t}\n\t\tconst ev = eventData.getRaw();\n\t\tif (ev !== INVALID_POINTER) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t}\n\t}\n\n\tpublic removeAllEvents(): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, -1, -1);\n\t}\n\n\tpublic removeAllEventsFromClient(clientId: number): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, clientId === -1 ? this._seqId : clientId, -1);\n\t}\n\n\tpublic processSequencer(msecToProcess: number) {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\t_module._fluid_sequencer_process(this._seq, msecToProcess);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic setIntervalForSequencer(msec: number) {\n\t\treturn setInterval(() => this.processSequencer(msec), msec);\n\t}\n}\n","import { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport Preset from './Preset';\nimport Synthesizer from './Synthesizer';\n\ntype SFontPointer = UniquePointerType<'sfont_ptr'>;\ntype PresetPointer = UniquePointerType<'preset_ptr'>;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\nlet _module: any;\n\nlet fluid_sfont_get_name: (sfont: SFontPointer) => string;\nlet fluid_preset_get_name: (preset: PresetPointer) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t} else {\n\t\t_module = Module;\n\t}\n\n\tfluid_sfont_get_name =\n\t\t_module.cwrap('fluid_sfont_get_name', 'string', ['number']);\n\tfluid_preset_get_name =\n\t\t_module.cwrap('fluid_preset_get_name', 'string', ['number']);\n}\n\nexport default class Soundfont {\n\tprivate readonly _ptr: SFontPointer;\n\n\t// @internal\n\tpublic constructor(sfontPtr: SFontPointer) {\n\t\tthis._ptr = sfontPtr;\n\t}\n\n\tpublic static getSoundfontById(synth: Synthesizer, id: number): Soundfont | null {\n\t\tbindFunctions();\n\n\t\tconst sfont = _module._fluid_synth_get_sfont_by_id(synth.getRawSynthesizer(), id);\n\t\tif (sfont === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Soundfont(sfont);\n\t}\n\n\tpublic getName(): string {\n\t\treturn fluid_sfont_get_name(this._ptr);\n\t}\n\n\tpublic getPreset(bank: number, presetNum: number): Preset | null {\n\t\tconst presetPtr: PresetPointer = _module._fluid_sfont_get_preset(this._ptr, bank, presetNum);\n\t\tif (presetPtr === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\treturn {\n\t\t\tsoundfont: this,\n\t\t\tname,\n\t\t\tbankNum,\n\t\t\tnum\n\t\t};\n\t}\n\n\tpublic getPresetIterable(): Iterable<Preset> {\n\t\tconst reset = () => {\n\t\t\t_module._fluid_sfont_iteration_start(this._ptr);\n\t\t};\n\t\tconst next = (): IteratorResult<Preset, void> => {\n\t\t\tconst presetPtr = _module._fluid_sfont_iteration_next(this._ptr);\n\t\t\tif (presetPtr === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\t\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\t\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tsoundfont: this,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tbankNum,\n\t\t\t\t\t\tnum\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst iterator = (): Iterator<Preset> => {\n\t\t\treset();\n\t\t\treturn {\n\t\t\t\tnext,\n\t\t\t};\n\t\t};\n\t\treturn {\n\t\t\t[Symbol.iterator]: iterator,\n\t\t};\n\t}\n}\n","\nimport {\n\tSynthesizerDefaultValues,\n\tInterpolationValues,\n\tChorusModulation,\n\tGeneratorTypes,\n\tLegatoMode,\n\tPortamentoMode\n} from './Constants';\nimport IMIDIEvent from './IMIDIEvent';\nimport ISequencer from './ISequencer';\nimport ISequencerEventData from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SynthesizerSettings from './SynthesizerSettings';\n\nimport MIDIEvent, { MIDIEventType } from './MIDIEvent';\nimport Sequencer from './Sequencer';\nimport SequencerEvent, { EventType as SequencerEventType } from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\nimport Soundfont from './Soundfont';\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction addFunction(func: Function, sig: string): number;\n\tfunction removeFunction(funcPtr: number): void;\n\tfunction addOnPostRun(cb: (Module: any) => void): void;\n}\n\ntype SettingsId = UniquePointerType<'settings_id'>;\ntype SynthId = UniquePointerType<'synth_id'>;\ntype PlayerId = UniquePointerType<'player_id'>;\n\nlet _module: any;\nlet _addFunction: (func: Function, sig: string) => number;\nlet _removeFunction: (funcPtr: number) => void;\nlet _fs: any;\n\n// wrapper to use String type\nlet fluid_settings_setint: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setnum: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setstr: (settings: SettingsId, name: string, str: string) => number;\nlet fluid_synth_error: undefined | ((synth: SynthId) => string);\nlet fluid_synth_sfload: (synth: SynthId, filename: string, reset_presets: number) => number;\nlet fluid_sequencer_register_client: (seq: PointerType, name: string, callback: number, data: number) => number;\n\nlet malloc: (size: number) => PointerType;\nlet free: (ptr: PointerType) => void;\n\nlet defaultMIDIEventCallback: (data: PointerType, event: MIDIEventType) => number;\n\nfunction bindFunctions() {\n\tif (fluid_synth_error) {\n\t\t// (already bound)\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_addFunction = AudioWorkletGlobalScope.wasmAddFunction;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_addFunction = addFunction;\n\t\t_removeFunction = removeFunction;\n\t}\n\t_fs = _module.FS;\n\n\t// wrapper to use String type\n\tfluid_settings_setint =\n\t\t_module.cwrap('fluid_settings_setint', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setnum =\n\t\t_module.cwrap('fluid_settings_setnum', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setstr =\n\t\t_module.cwrap('fluid_settings_setstr', 'number', ['number', 'string', 'string']);\n\tfluid_synth_error =\n\t\t_module.cwrap('fluid_synth_error', 'string', ['number']);\n\tfluid_synth_sfload =\n\t\t_module.cwrap('fluid_synth_sfload', 'number', ['number', 'string', 'number']);\n\tfluid_sequencer_register_client =\n\t\t_module.cwrap('fluid_sequencer_register_client', 'number', ['number', 'string', 'number', 'number']);\n\n\tmalloc = _module._malloc.bind(_module);\n\tfree = _module._free.bind(_module);\n\n\tdefaultMIDIEventCallback = _module._fluid_synth_handle_midi_event.bind(_module);\n}\n\nlet promiseWaitForInitialized: Promise<void> | undefined;\nfunction waitForInitialized() {\n\tif (promiseWaitForInitialized) {\n\t\treturn promiseWaitForInitialized;\n\t}\n\n\tlet mod: any;\n\tlet addOnPostRunFn: ((cb: (Module: any) => void) => void) | undefined;\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\tmod = AudioWorkletGlobalScope.wasmModule;\n\t\taddOnPostRunFn = AudioWorkletGlobalScope.addOnPostRun;\n\t} else {\n\t\tmod = Module;\n\t\taddOnPostRunFn = typeof addOnPostRun !== 'undefined' ? addOnPostRun : undefined;\n\t}\n\tif (mod.calledRun) {\n\t\tpromiseWaitForInitialized = Promise.resolve();\n\t\treturn promiseWaitForInitialized;\n\t}\n\tif (typeof addOnPostRunFn === 'undefined') {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\tconst fn: (() => void) | undefined = _module.onRuntimeInitialized;\n\t\t\t_module.onRuntimeInitialized = () => {\n\t\t\t\tresolve();\n\t\t\t\tif (fn) {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t} else {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\taddOnPostRunFn!(resolve);\n\t\t});\n\t}\n\treturn promiseWaitForInitialized;\n}\n\nfunction setBoolValueForSettings(settings: SettingsId, name: string, value: boolean | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value ? 1 : 0);\n\t}\n}\nfunction setIntValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value);\n\t}\n}\nfunction setNumValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setnum(settings, name, value);\n\t}\n}\nfunction setStrValueForSettings(settings: SettingsId, name: string, value: string | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setstr(settings, name, value);\n\t}\n}\n\nfunction getActiveVoiceCount(synth: SynthId): number {\n\tconst actualCount = _module._fluid_synth_get_active_voice_count(synth);\n\tif (!actualCount) {\n\t\treturn 0;\n\t}\n\n\t// FluidSynth may return incorrect value for active voice count,\n\t// so check internal data and correct it\n\n\t// check if the structure is not changed\n\t// for fluidsynth 2.0.x-2.1.x:\n\t//   140 === offset [synth->voice]\n\t//   144 === offset [synth->active_voice_count] for \n\t// for fluidsynth 2.2.x:\n\t//   144 === offset [synth->voice]\n\t//   148 === offset [synth->active_voice_count]\n\t// first check 2.1.x structure\n\tlet baseOffsetOfVoice = 140;\n\tlet offsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\tlet structActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\tif (structActiveVoiceCount !== actualCount) {\n\t\t// add 4 for 2.2.x\n\t\tbaseOffsetOfVoice += 4;\n\t\toffsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\t\tstructActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\t\tif (structActiveVoiceCount !== actualCount) {\n\t\t\t// unknown structure\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t\t);\n\t\t\treturn actualCount;\n\t\t}\n\t}\n\n\tconst voiceList = _module.HEAPU32[(synth + baseOffsetOfVoice) >> 2];\n\t// (voice should not be NULL)\n\tif (!voiceList || voiceList >= _module.HEAPU32.byteLength) {\n\t\t// unknown structure\n\t\tconst c = console;\n\t\tc.warn(\n\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t);\n\t\treturn actualCount;\n\t}\n\n\t// count of internal voice data is restricted to polyphony value\n\tconst voiceCount = _module._fluid_synth_get_polyphony(synth);\n\tlet isRunning = false;\n\tfor (let i = 0; i < voiceCount; ++i) {\n\t\t// auto voice = voiceList[i]\n\t\tconst voice = _module.HEAPU32[(voiceList >> 2) + i];\n\t\tif (!voice) {\n\t\t\tcontinue;\n\t\t}\n\t\t// offset [voice->status]\n\t\tconst status = _module.HEAPU8[voice + 4];\n\t\t// 4: FLUID_VOICE_OFF\n\t\tif (status !== 4) {\n\t\t\tisRunning = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!isRunning) {\n\t\tif (structActiveVoiceCount !== 0) {\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: Active voice count is not zero, but all voices are off:',\n\t\t\t\tstructActiveVoiceCount,\n\t\t\t);\n\t\t}\n\t\t_module.HEAPU32[offsetOfActiveVoiceCount] = 0;\n\t\treturn 0;\n\t}\n\n\treturn actualCount;\n}\n\nfunction makeRandomFileName(type: string, ext: string) {\n\treturn `/${type}-r${Math.random() * 65535}-${Math.random() * 65535}${ext}`;\n}\n\n/** Hook callback function type */\nexport interface HookMIDIEventCallback {\n\t/**\n\t * Hook callback function type.\n\t * @param synth the base synthesizer instance\n\t * @param eventType MIDI event type (e.g. 0x90 is note-on event)\n\t * @param eventData detailed event data\n\t * @param param parameter data passed to the registration method\n\t * @return true if the event data is processed, or false if the default processing is necessary\n\t */\n\t(synth: Synthesizer, eventType: number, eventData: IMIDIEvent, param: any): boolean;\n}\n\n/** Client callback function type for sequencer object */\nexport interface SequencerClientCallback {\n\t/**\n\t * Client callback function type for sequencer object.\n\t * @param time the sequencer tick value\n\t * @param eventType sequencer event type\n\t * @param event actual event data (can only be used in this callback function)\n\t * @param sequencer the base sequencer object\n\t * @param param parameter data passed to the registration method\n\t */\n\t(time: number, eventType: SequencerEventType, event: ISequencerEventData, sequencer: ISequencer, param: number): void;\n}\n\nfunction makeMIDIEventCallback(synth: Synthesizer, cb: HookMIDIEventCallback, param: any) {\n\treturn (data: PointerType, event: MIDIEventType): number => {\n\t\tconst t = _module._fluid_midi_event_get_type(event);\n\t\tif (cb(synth, t, new MIDIEvent(event, _module), param)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _module._fluid_synth_handle_midi_event(data, event);\n\t};\n}\n\n/** Default implementation of ISynthesizer */\nexport default class Synthesizer implements ISynthesizer {\n\t/** @internal */\n\tprivate _settings: SettingsId;\n\t/** @internal */\n\tprivate _synth: SynthId;\n\t/** @internal */\n\tprivate _player: PlayerId;\n\t/** @internal */\n\tprivate _playerPlaying: boolean;\n\t/** @internal */\n\tprivate _playerDefer: undefined | {\n\t\tpromise: Promise<void>;\n\t\tresolve: () => void;\n\t};\n\t/** @internal */\n\tprivate _playerCallbackPtr: number | null;\n\t/** @internal */\n\tprivate _fluidSynthCallback: PointerType | null;\n\n\t/** @internal */\n\tprivate _buffer: PointerType;\n\t/** @internal */\n\tprivate _bufferSize: number;\n\t/** @internal */\n\tprivate _numPtr: PointerType;\n\n\t/** @internal */\n\tprivate _gain: number;\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._settings = INVALID_POINTER;\n\t\tthis._synth = INVALID_POINTER;\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerPlaying = false;\n\t\tthis._playerCallbackPtr = null;\n\t\tthis._fluidSynthCallback = null;\n\n\t\tthis._buffer = INVALID_POINTER;\n\t\tthis._bufferSize = 0;\n\t\tthis._numPtr = INVALID_POINTER;\n\n\t\tthis._gain = SynthesizerDefaultValues.Gain;\n\t}\n\n\t/** Return the promise object that resolves when WebAssembly has been initialized */\n\tpublic static waitForWasmInitialized(): Promise<void> {\n\t\treturn waitForInitialized();\n\t}\n\n\tpublic isInitialized() {\n\t\treturn this._synth !== INVALID_POINTER;\n\t}\n\n\t/** Return the raw synthesizer instance value (pointer for libfluidsynth). */\n\tpublic getRawSynthesizer(): number {\n\t\treturn this._synth;\n\t}\n\n\tpublic createAudioNode(context: AudioContext, frameSize?: number): AudioNode {\n\t\tconst node = context.createScriptProcessor(frameSize, 0, 2);\n\t\tnode.addEventListener('audioprocess', (ev) => {\n\t\t\tthis.render(ev.outputBuffer);\n\t\t});\n\t\treturn node;\n\t}\n\n\tpublic init(sampleRate: number, settings?: SynthesizerSettings) {\n\t\tthis.close();\n\n\t\tconst set = this._settings = _module._new_fluid_settings();\n\t\tfluid_settings_setnum(set, 'synth.sample-rate', sampleRate);\n\t\tif (settings) {\n\t\t\tif (typeof settings.initialGain !== 'undefined') {\n\t\t\t\tthis._gain = settings.initialGain;\n\t\t\t}\n\t\t\tsetBoolValueForSettings(set, 'synth.chorus.active', settings.chorusActive);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.depth', settings.chorusDepth);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.level', settings.chorusLevel);\n\t\t\tsetIntValueForSettings(set, 'synth.chorus.nr', settings.chorusNr);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.speed', settings.chorusSpeed);\n\t\t\tsetIntValueForSettings(set, 'synth.midi-channels', settings.midiChannelCount);\n\t\t\tsetStrValueForSettings(set, 'synth.midi-bank-select', settings.midiBankSelect);\n\t\t\tsetIntValueForSettings(set, 'synth.min-note-length', settings.minNoteLength);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.age', settings.overflowAge);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.important', settings.overflowImportantValue);\n\t\t\tif (typeof settings.overflowImportantChannels !== 'undefined') {\n\t\t\t\tfluid_settings_setstr(\n\t\t\t\t\tset,\n\t\t\t\t\t'synth.overflow.important-channels',\n\t\t\t\t\tsettings.overflowImportantChannels.join(',')\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.percussion', settings.overflowPercussion);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.released', settings.overflowReleased);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.sustained', settings.overflowSustained);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.volume', settings.overflowVolume);\n\t\t\tsetIntValueForSettings(set, 'synth.polyphony', settings.polyphony);\n\t\t\tsetBoolValueForSettings(set, 'synth.reverb.active', settings.reverbActive);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.damp', settings.reverbDamp);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.level', settings.reverbLevel);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.room-size', settings.reverbRoomSize);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.width', settings.reverbWidth);\n\t\t}\n\t\tfluid_settings_setnum(set, 'synth.gain', this._gain);\n\n\t\tthis._synth = _module._new_fluid_synth(this._settings);\n\n\t\tthis._numPtr = malloc(8);\n\t}\n\n\tpublic close() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis._closePlayer();\n\t\t_module._delete_fluid_synth(this._synth);\n\t\tthis._synth = INVALID_POINTER;\n\t\t_module._delete_fluid_settings(this._settings);\n\t\tthis._settings = INVALID_POINTER;\n\t\tfree(this._numPtr);\n\t\tthis._numPtr = INVALID_POINTER;\n\t}\n\n\tpublic isPlaying() {\n\t\treturn this._synth !== INVALID_POINTER &&\n\t\t\tgetActiveVoiceCount(this._synth) > 0;\n\t}\n\n\tpublic setInterpolation(value: InterpolationValues, channel?: number) {\n\t\tthis.ensureInitialized();\n\t\tif (typeof channel === 'undefined') {\n\t\t\tchannel = -1;\n\t\t}\n\t\t_module._fluid_synth_set_interp_method(this._synth, channel, value);\n\t}\n\n\tpublic getGain() {\n\t\treturn this._gain;\n\t}\n\n\tpublic setGain(gain: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_gain(this._synth, gain);\n\t\tthis._gain = _module._fluid_synth_get_gain(this._synth);\n\t}\n\n\tpublic setChannelType(channel: number, isDrum: boolean) {\n\t\tthis.ensureInitialized();\n\t\t// CHANNEL_TYPE_MELODIC = 0, CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, channel, isDrum ? 1 : 0);\n\t}\n\n\tpublic waitForVoicesStopped() {\n\t\treturn this.flushFramesAsync();\n\t}\n\n\tpublic loadSFont(bin: ArrayBuffer) {\n\t\tthis.ensureInitialized();\n\n\t\tconst name = makeRandomFileName('sfont', '.sf2');\n\t\tconst ub = new Uint8Array(bin);\n\n\t\t_fs.writeFile(name, ub);\n\t\tconst sfont = fluid_synth_sfload(this._synth, name, 1);\n\t\t_fs.unlink(name);\n\t\treturn sfont === -1 ?\n\t\t\tPromise.reject(new Error(fluid_synth_error!(this._synth))) :\n\t\t\tPromise.resolve(sfont);\n\t}\n\n\tpublic unloadSFont(id: number) {\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\tthis.flushFramesSync();\n\n\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t}\n\n\tpublic unloadSFontAsync(id: number) {\n\t\t// not throw with Promise.reject\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\treturn this.flushFramesAsync().then(() => {\n\t\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the `Soundfont` instance for specified SoundFont.\n\t * @param sfontId loaded SoundFont id ({@link loadSFont} returns this)\n\t * @return `Soundfont` instance or `null` if `sfontId` is not valid or loaded\n\t */\n\tpublic getSFontObject(sfontId: number): Soundfont | null {\n\t\treturn Soundfont.getSoundfontById(this, sfontId);\n\t}\n\n\tpublic getSFontBankOffset(id: number) {\n\t\tthis.ensureInitialized();\n\t\treturn Promise.resolve(_module._fluid_synth_get_bank_offset(this._synth, id) as number);\n\t}\n\tpublic setSFontBankOffset(id: number, offset: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_bank_offset(this._synth, id, offset);\n\t}\n\t\n\tpublic render(outBuffer: AudioBuffer | Float32Array[]) {\n\t\tconst frameCount = 'numberOfChannels' in outBuffer ? outBuffer.length : outBuffer[0].length;\n\t\tconst channels = 'numberOfChannels' in outBuffer ? outBuffer.numberOfChannels : outBuffer.length;\n\t\tconst sizePerChannel = 4 * frameCount;\n\t\tconst totalSize = sizePerChannel * 2;\n\t\tif (this._bufferSize < totalSize) {\n\t\t\tif (this._buffer !== INVALID_POINTER) {\n\t\t\t\tfree(this._buffer);\n\t\t\t}\n\t\t\tthis._buffer = malloc(totalSize);\n\t\t\tthis._bufferSize = totalSize;\n\t\t}\n\n\t\tconst memLeft = this._buffer;\n\t\tconst memRight = (this._buffer as number + sizePerChannel) as PointerType;\n\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\n\t\tconst aLeft = new Float32Array(_module.HEAPU8.buffer, memLeft, frameCount);\n\t\tconst aRight = channels >= 2 ? new Float32Array(_module.HEAPU8.buffer, memRight, frameCount) : null;\n\t\tif ('numberOfChannels' in outBuffer) {\n\t\t\tif (outBuffer.copyToChannel) {\n\t\t\t\toutBuffer.copyToChannel(aLeft, 0, 0);\n\t\t\t\tif (aRight) {\n\t\t\t\t\toutBuffer.copyToChannel(aRight, 1, 0);\n\t\t\t\t}\n\t\t\t} else { // copyToChannel API not exist in Safari AudioBuffer\n\t\t\t\tconst leftData = outBuffer.getChannelData(0);\n\t\t\t\taLeft.forEach((val, i)=> leftData[i] = val);\n\t\t\t\tif (aRight) {\n\t\t\t\t\tconst rightData = outBuffer.getChannelData(1);\n\t\t\t\t\taRight.forEach((val, i)=> rightData[i] = val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutBuffer[0].set(aLeft);\n\t\t\tif (aRight) {\n\t\t\t\toutBuffer[1].set(aRight);\n\t\t\t}\n\t\t}\n\n\t\t// check and update player status\n\t\tthis.isPlayerPlaying();\n\t}\n\n\tpublic midiNoteOn(chan: number, key: number, vel: number) {\n\t\t_module._fluid_synth_noteon(this._synth, chan, key, vel);\n\t}\n\tpublic midiNoteOff(chan: number, key: number) {\n\t\t_module._fluid_synth_noteoff(this._synth, chan, key);\n\t}\n\tpublic midiKeyPressure(chan: number, key: number, val: number) {\n\t\t_module._fluid_synth_key_pressure(this._synth, chan, key, val);\n\t}\n\tpublic midiControl(chan: number, ctrl: number, val: number) {\n\t\t_module._fluid_synth_cc(this._synth, chan, ctrl, val);\n\t}\n\tpublic midiProgramChange(chan: number, prognum: number) {\n\t\t_module._fluid_synth_program_change(this._synth, chan, prognum);\n\t}\n\tpublic midiChannelPressure(chan: number, val: number) {\n\t\t_module._fluid_synth_channel_pressure(this._synth, chan, val);\n\t}\n\tpublic midiPitchBend(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_bend(this._synth, chan, val);\n\t}\n\tpublic midiSysEx(data: Uint8Array) {\n\t\tconst len = data.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(data, mem);\n\t\t_module._fluid_synth_sysex(this._synth, mem, len,\n\t\t\tINVALID_POINTER, INVALID_POINTER, INVALID_POINTER, 0);\n\t\tfree(mem);\n\t}\n\n\tpublic midiPitchWheelSensitivity(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_wheel_sens(this._synth, chan, val);\n\t}\n\tpublic midiBankSelect(chan: number, bank: number) {\n\t\t_module._fluid_synth_bank_select(this._synth, chan, bank);\n\t}\n\tpublic midiSFontSelect(chan: number, sfontId: number) {\n\t\t_module._fluid_synth_sfont_select(this._synth, chan, sfontId);\n\t}\n\tpublic midiProgramSelect(chan: number, sfontId: number, bank: number, presetNum: number) {\n\t\t_module._fluid_synth_program_select(this._synth, chan, sfontId, bank, presetNum);\n\t}\n\tpublic midiUnsetProgram(chan: number) {\n\t\t_module._fluid_synth_unset_program(this._synth, chan);\n\t}\n\tpublic midiProgramReset() {\n\t\t_module._fluid_synth_program_reset(this._synth);\n\t}\n\tpublic midiSystemReset() {\n\t\t_module._fluid_synth_system_reset(this._synth);\n\t}\n\tpublic midiAllNotesOff(chan?: number) {\n\t\t_module._fluid_synth_all_notes_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiAllSoundsOff(chan?: number) {\n\t\t_module._fluid_synth_all_sounds_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiSetChannelType(chan: number, isDrum: boolean) {\n\t\t// CHANNEL_TYPE_MELODIC = 0\n\t\t// CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, chan, isDrum ? 1 : 0);\n\t}\n\n\t/**\n\t * Set reverb parameters to the synthesizer.\n\t */\n\tpublic setReverb(roomsize: number, damping: number, width: number, level: number) {\n\t\t_module._fluid_synth_set_reverb(this._synth, roomsize, damping, width, level);\n\t}\n\t/**\n\t * Set reverb roomsize parameter to the synthesizer.\n\t */\n\tpublic setReverbRoomsize(roomsize: number) {\n\t\t_module._fluid_synth_set_reverb_roomsize(this._synth, roomsize);\n\t}\n\t/**\n\t * Set reverb damping parameter to the synthesizer.\n\t */\n\tpublic setReverbDamp(damping: number) {\n\t\t_module._fluid_synth_set_reverb_damp(this._synth, damping);\n\t}\n\t/**\n\t * Set reverb width parameter to the synthesizer.\n\t */\n\tpublic setReverbWidth(width: number) {\n\t\t_module._fluid_synth_set_reverb_width(this._synth, width);\n\t}\n\t/**\n\t * Set reverb level to the synthesizer.\n\t */\n\tpublic setReverbLevel(level: number) {\n\t\t_module._fluid_synth_set_reverb_level(this._synth, level);\n\t}\n\t/**\n\t * Enable or disable reverb effect of the synthesizer.\n\t */\n\tpublic setReverbOn(on: boolean) {\n\t\t_module._fluid_synth_set_reverb_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get reverb roomsize parameter of the synthesizer.\n\t */\n\tpublic getReverbRoomsize(): number {\n\t\treturn _module._fluid_synth_get_reverb_roomsize(this._synth);\n\t}\n\t/**\n\t * Get reverb damping parameter of the synthesizer.\n\t */\n\tpublic getReverbDamp(): number {\n\t\treturn _module._fluid_synth_get_reverb_damp(this._synth);\n\t}\n\t/**\n\t * Get reverb level of the synthesizer.\n\t */\n\tpublic getReverbLevel(): number {\n\t\treturn _module._fluid_synth_get_reverb_level(this._synth);\n\t}\n\t/**\n\t * Get reverb width parameter of the synthesizer.\n\t */\n\tpublic getReverbWidth(): number {\n\t\treturn _module._fluid_synth_get_reverb_width(this._synth);\n\t}\n\n\t/**\n\t * Set chorus parameters to the synthesizer.\n\t */\n\tpublic setChorus(voiceCount: number, level: number, speed: number, depthMillisec: number, type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus(this._synth, voiceCount, level, speed, depthMillisec, type);\n\t}\n\t/**\n\t * Set chorus voice count parameter to the synthesizer.\n\t */\n\tpublic setChorusVoiceCount(voiceCount: number) {\n\t\t_module._fluid_synth_set_chorus_nr(this._synth, voiceCount);\n\t}\n\t/**\n\t * Set chorus level parameter to the synthesizer.\n\t */\n\tpublic setChorusLevel(level: number) {\n\t\t_module._fluid_synth_set_chorus_level(this._synth, level);\n\t}\n\t/**\n\t * Set chorus speed parameter to the synthesizer.\n\t */\n\tpublic setChorusSpeed(speed: number) {\n\t\t_module._fluid_synth_set_chorus_speed(this._synth, speed);\n\t}\n\t/**\n\t * Set chorus depth parameter to the synthesizer.\n\t */\n\tpublic setChorusDepth(depthMillisec: number) {\n\t\t_module._fluid_synth_set_chorus_depth(this._synth, depthMillisec);\n\t}\n\t/**\n\t * Set chorus modulation type to the synthesizer.\n\t */\n\tpublic setChorusType(type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus_type(this._synth, type);\n\t}\n\t/**\n\t * Enable or disable chorus effect of the synthesizer.\n\t */\n\tpublic setChorusOn(on: boolean) {\n\t\t_module._fluid_synth_set_chorus_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get chorus voice count of the synthesizer.\n\t */\n\tpublic getChorusVoiceCount(): number {\n\t\treturn _module._fluid_synth_get_chorus_nr(this._synth);\n\t}\n\t/**\n\t * Get chorus level of the synthesizer.\n\t */\n\tpublic getChorusLevel(): number {\n\t\treturn _module._fluid_synth_get_chorus_level(this._synth);\n\t}\n\t/**\n\t * Get chorus speed of the synthesizer.\n\t */\n\tpublic getChorusSpeed(): number {\n\t\treturn _module._fluid_synth_get_chorus_speed(this._synth);\n\t}\n\t/**\n\t * Get chorus depth (in milliseconds) of the synthesizer.\n\t */\n\tpublic getChorusDepth(): number {\n\t\treturn _module._fluid_synth_get_chorus_depth(this._synth);\n\t}\n\t/**\n\t * Get chorus modulation type of the synthesizer.\n\t */\n\tpublic getChorusType(): ChorusModulation {\n\t\treturn _module._fluid_synth_get_chorus_type(this._synth);\n\t}\n\n\t/**\n\t * Get generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @return a value related to the generator\n\t */\n\tpublic getGenerator(channel: number, param: GeneratorTypes): number {\n\t\treturn _module._fluid_synth_get_gen(this._synth, channel, param);\n\t}\n\t/**\n\t * Set generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @param value a value related to the generator\n\t */\n\tpublic setGenerator(channel: number, param: GeneratorTypes, value: number) {\n\t\t_module._fluid_synth_set_gen(this._synth, channel, param, value);\n\t}\n\t/**\n\t * Return the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return legato mode\n\t */\n\tpublic getLegatoMode(channel: number) {\n\t\t_module._fluid_synth_get_legato_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as LegatoMode;\n\t}\n\t/**\n\t * Set the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode legato mode\n\t */\n\tpublic setLegatoMode(channel: number, mode: LegatoMode) {\n\t\t_module._fluid_synth_set_legato_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return portamento mode\n\t */\n\tpublic getPortamentoMode(channel: number) {\n\t\t_module._fluid_synth_get_portamento_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as PortamentoMode;\n\t}\n\t/**\n\t * Set the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode portamento mode\n\t */\n\tpublic setPortamentoMode(channel: number, mode: PortamentoMode) {\n\t\t_module._fluid_synth_set_portamento_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return breath mode (BreathFlags)\n\t */\n\tpublic getBreathMode(channel: number) {\n\t\t_module._fluid_synth_get_breath_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as number;\n\t}\n\t/**\n\t * Set the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param flags breath mode flags (BreathFlags)\n\t */\n\tpublic setBreathMode(channel: number, flags: number) {\n\t\t_module._fluid_synth_set_breath_mode(this._synth, channel, flags);\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\n\tpublic resetPlayer() {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tthis._initPlayer();\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic closePlayer() {\n\t\tthis._closePlayer();\n\t}\n\n\t/** @internal */\n\tprivate _initPlayer() {\n\t\tthis._closePlayer();\n\n\t\tconst player = _module._new_fluid_player(this._synth);\n\t\tthis._player = player;\n\t\tif (player !== INVALID_POINTER) {\n\t\t\tif (this._fluidSynthCallback === null) {\n\t\t\t\t// hacky retrieve 'fluid_synth_handle_midi_event' callback pointer\n\t\t\t\t// * 'playback_callback' is filled with 'fluid_synth_handle_midi_event' by default.\n\t\t\t\t// * 'playback_userdata' is filled with the synthesizer pointer by default\n\t\t\t\tconst funcPtr: PointerType = _module.HEAPU32[((player as number) + 588) >> 2]; // _fluid_player_t::playback_callback\n\t\t\t\tconst synthPtr: SynthId = _module.HEAPU32[((player as number) + 592) >> 2];    // _fluid_player_t::playback_userdata\n\t\t\t\tif (synthPtr === this._synth) {\n\t\t\t\t\tthis._fluidSynthCallback = funcPtr;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Out of memory');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _closePlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stopPlayer();\n\t\t_module._delete_fluid_player(p);\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerCallbackPtr = null;\n\t}\n\n\tpublic isPlayerPlaying() {\n\t\tif (this._playerPlaying) {\n\t\t\tconst status = _module._fluid_player_get_status(this._player);\n\t\t\tif (status === 1 /*FLUID_PLAYER_PLAYING*/) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tthis.stopPlayer();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addSMFDataToPlayer(bin: ArrayBuffer) {\n\t\tthis.ensurePlayerInitialized();\n\t\tconst len = bin.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(new Uint8Array(bin), mem);\n\t\tconst r: number = _module._fluid_player_add_mem(this._player, mem, len);\n\t\tfree(mem);\n\t\treturn r !== -1 ? Promise.resolve() : Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t}\n\n\tpublic playPlayer() {\n\t\tthis.ensurePlayerInitialized();\n\t\tif (this._playerPlaying) {\n\t\t\tthis.stopPlayer();\n\t\t}\n\n\t\tif (_module._fluid_player_play(this._player) === -1) {\n\t\t\treturn Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t\t}\n\t\tthis._playerPlaying = true;\n\t\tlet resolver = () => { };\n\t\tconst p = new Promise<void>((resolve) => {\n\t\t\tresolver = resolve;\n\t\t});\n\t\tthis._playerDefer = {\n\t\t\tpromise: p,\n\t\t\tresolve: resolver\n\t\t};\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic stopPlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER || !this._playerPlaying) {\n\t\t\treturn;\n\t\t}\n\t\t_module._fluid_player_stop(p);\n\t\t_module._fluid_player_join(p);\n\t\t_module._fluid_synth_all_sounds_off(this._synth, -1);\n\t\tif (this._playerDefer) {\n\t\t\tthis._playerDefer.resolve();\n\t\t\tthis._playerDefer = void (0);\n\t\t}\n\t\tthis._playerPlaying = false;\n\t}\n\n\tpublic retrievePlayerCurrentTick(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_current_tick(this._player));\n\t}\n\tpublic retrievePlayerTotalTicks(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_total_ticks(this._player));\n\t}\n\tpublic retrievePlayerBpm(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_bpm(this._player));\n\t}\n\tpublic retrievePlayerMIDITempo(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_midi_tempo(this._player));\n\t}\n\tpublic seekPlayer(ticks: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_seek(this._player, ticks);\n\t}\n\n\t/**\n\t * Hooks MIDI events sent by the player.\n\t * initPlayer() must be called before calling this method.\n\t * @param callback hook callback function, or null to unhook\n\t * @param param any additional data passed to the callback\n\t */\n\tpublic hookPlayerMIDIEvents(callback: HookMIDIEventCallback | null, param?: any) {\n\t\tthis.ensurePlayerInitialized();\n\n\t\tconst oldPtr = this._playerCallbackPtr;\n\t\tif (oldPtr === null && callback === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst newPtr = (\n\t\t\t// if callback is specified, add function\n\t\t\tcallback !== null ? _addFunction(makeMIDIEventCallback(this, callback, param), 'iii') : (\n\t\t\t\t// if _fluidSynthCallback is filled, set null to use it for reset callback\n\t\t\t\t// if not, add function defaultMIDIEventCallback for reset\n\t\t\t\tthis._fluidSynthCallback !== null ? null : _addFunction(defaultMIDIEventCallback, 'iii')\n\t\t\t)\n\t\t);\n\t\t// the third parameter of 'fluid_player_set_playback_callback' should be 'fluid_synth_t*'\n\t\tif (oldPtr !== null && newPtr !== null) {\n\t\t\t// (using defaultMIDIEventCallback also comes here)\n\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t_removeFunction(oldPtr);\n\t\t} else {\n\t\t\tif (newPtr === null) {\n\t\t\t\t// newPtr === null --> use _fluidSynthCallback\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, this._fluidSynthCallback!, this._synth);\n\t\t\t\t_removeFunction(oldPtr!);\n\t\t\t} else {\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t}\n\t\t}\n\t\tthis._playerCallbackPtr = newPtr;\n\t}\n\n\t/** @internal */\n\tprivate ensureInitialized() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\tthrow new Error('Synthesizer is not initialized');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate ensurePlayerInitialized() {\n\t\tthis.ensureInitialized();\n\t\tif (this._player === INVALID_POINTER) {\n\t\t\tthis._initPlayer();\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate renderRaw(memLeft: PointerType, memRight: PointerType, frameCount: number) {\n\t\t_module._fluid_synth_write_float(this._synth, frameCount, memLeft, 0, 1, memRight, 0, 1);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesSync() {\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\twhile (this.isPlaying()) {\n\t\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\t\t}\n\t\tfree(mem);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesAsync() {\n\t\tif (!this.isPlaying()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\tconst nextFrame = (\n\t\t\ttypeof setTimeout !== 'undefined' ?\n\t\t\t\t() => {\n\t\t\t\t\treturn new Promise<void>((resolve) => setTimeout(resolve, 0));\n\t\t\t\t} :\n\t\t\t\t() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t);\n\t\tfunction head(): Promise<void> {\n\t\t\treturn nextFrame().then(tail);\n\t\t}\n\t\tconst self = this;\n\t\tfunction tail(): Promise<void> {\n\t\t\tif (!self.isPlaying()) {\n\t\t\t\tfree(mem);\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tself.renderRaw(memLeft, memRight, frameCount);\n\t\t\treturn head();\n\t\t}\n\t\treturn head();\n\t}\n\n\tpublic waitForPlayerStopped() {\n\t\treturn this._playerDefer ? this._playerDefer.promise : Promise.resolve();\n\t}\n\n\t/**\n\t * Create the sequencer object for this class.\n\t */\n\tpublic static createSequencer(): Promise<ISequencer> {\n\t\tbindFunctions();\n\t\tconst seq = new Sequencer();\n\t\treturn seq._initialize().then(() => seq);\n\t}\n\n\t/**\n\t * Registers the user-defined client to the sequencer.\n\t * The client can receive events in the time from sequencer process.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param name the client name\n\t * @param callback the client callback function that processes event data\n\t * @param param additional parameter passed to the callback\n\t * @return registered sequencer client id (can be passed to seq.unregisterClient())\n\t */\n\tpublic static registerSequencerClient(seq: ISequencer, name: string, callback: SequencerClientCallback, param: number): number {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tconst ptr = _addFunction((time: number, ev: PointerType, _seq: number, data: number) => {\n\t\t\tconst e = new SequencerEventData(ev, _module);\n\t\t\tconst type: SequencerEventType = _module._fluid_event_get_type(ev);\n\t\t\tcallback(time, type, e, seq, data);\n\t\t}, 'viiii');\n\t\tconst r = fluid_sequencer_register_client(seq.getRaw(), name, ptr, param);\n\t\tif (r !== -1) {\n\t\t\tseq._clientFuncMap[r] = ptr;\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * Send sequencer event immediately to the specific client.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param event event data\n\t */\n\tpublic static sendEventToClientNow(seq: ISequencer, clientId: number, event: SequencerEvent): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventToClientNow(clientId, event);\n\t}\n\t/**\n\t * (Re-)send event data immediately.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param eventData event data which can be retrieved in SequencerClientCallback\n\t */\n\tpublic static sendEventNow(seq: ISequencer, clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventNow(clientId, eventData);\n\t}\n\t/**\n\t * Set interval timer process to call processSequencer for this sequencer.\n\t * This method uses 'setInterval' global method to register timer.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param msec time in milliseconds passed to both setInterval and processSequencer\n\t * @return return value of 'setInterval' (usually passing to 'clearInterval' will reset event)\n\t */\n\tpublic static setIntervalForSequencer(seq: ISequencer, msec: number) {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\treturn seq.setIntervalForSequencer(msec);\n\t}\n}\n","\n/** Error object used for errors occurred in the message receiver (e.g. Worklet) */\nexport default class MessageError extends Error {\n\t/** The name of original error object if available */\n\tpublic baseName: any;\n\t/** Detailed properties of original error object if available */\n\tpublic detail: any;\n\n\tconstructor(baseName: string, message: string, detail?: any) {\n\t\tsuper(message);\n\t\tthis.baseName = baseName;\n\t\tthis.detail = detail;\n\t\tif (detail && detail.stack) {\n\t\t\tthis.stack = detail.stack;\n\t\t}\n\t}\n}\n","\nimport MessageError from './MessageError';\n\nexport interface MethodCallEventData {\n\tid: number;\n\tmethod: string;\n\targs: any[];\n}\n\nexport interface MethodReturnEventData {\n\tid: number;\n\tmethod: string;\n\tval: any;\n\terror?: MessageErrorData;\n}\n\nexport interface MessageErrorData {\n\tbaseName: string;\n\tmessage: string;\n\tdetail: any;\n}\n\n/** @internal */\nexport interface Defer<T> {\n\tresolve(value: T): void;\n\treject(reason: any): void;\n}\n\n/** @internal */\nexport interface DeferMap {\n\t[id: number]: Defer<any>;\n}\n\n/** @internal */\nexport type HookReturnMessageCallback = (data: MethodReturnEventData) => boolean;\n\n/** @internal */\nexport interface CallMessageInstance {\n\tport: MessagePort;\n\tdefers: DeferMap;\n\tdeferId: number;\n}\n\n/** @internal */\nexport function initializeCallPort(\n\tport: MessagePort,\n\thookMessage?: HookReturnMessageCallback | undefined\n): CallMessageInstance {\n\tconst instance: CallMessageInstance = {\n\t\tport: port,\n\t\tdefers: {},\n\t\tdeferId: 0\n\t};\n\tport.addEventListener('message', (e) => processReturnMessage(instance.defers, hookMessage, e));\n\tport.start();\n\treturn instance;\n}\n\nfunction convertErrorTransferable(err: Error): MessageErrorData {\n\tconst result: any = {};\n\tconst objList: any[] = [];\n\tlet obj: any = err;\n\twhile (obj && obj !== Object.prototype) {\n\t\tobjList.unshift(obj);\n\t\tobj = Object.getPrototypeOf(obj);\n\t}\n\tobjList.forEach((o) => {\n\t\tObject.getOwnPropertyNames(o).forEach((key) => {\n\t\t\ttry {\n\t\t\t\tconst data = (err as any)[key];\n\t\t\t\tif (typeof data !== 'function' && typeof data !== 'symbol') {\n\t\t\t\t\tresult[key] = data;\n\t\t\t\t}\n\t\t\t} catch (_e) { }\n\t\t});\n\t});\n\treturn {\n\t\tbaseName: err.name,\n\t\tmessage: err.message,\n\t\tdetail: result\n\t};\n}\n\nfunction convertAnyErrorTransferable(err: any): MessageErrorData {\n\treturn convertErrorTransferable((err && err instanceof Error) ? err : new Error(`${err}`));\n}\n\nfunction makeMessageError(error: MessageErrorData): MessageError {\n\treturn new MessageError(error.baseName, error.message, error.detail);\n}\n\nfunction processReturnMessage(defers: DeferMap, hook: HookReturnMessageCallback | undefined, e: MessageEvent) {\n\tconst data: MethodReturnEventData = e.data;\n\tif (!data) {\n\t\treturn;\n\t}\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst defer = defers[data.id];\n\tif (defer) {\n\t\tdelete defers[data.id];\n\t\tif (data.error) {\n\t\t\tdefer.reject(makeMessageError(data.error));\n\t\t} else {\n\t\t\tdefer.resolve(data.val);\n\t\t}\n\t} else {\n\t\tif (data.error) {\n\t\t\tthrow makeMessageError(data.error);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postCall(instance: CallMessageInstance, method: string, args: any[]): void;\n\n/** @internal */\nexport function postCall({ port }: CallMessageInstance, method: string, args: any[]) {\n\tport.postMessage({\n\t\tid: -1, method, args\n\t} as MethodCallEventData);\n}\n\n/** @internal */\nexport function postCallWithPromise<T>(instance: CallMessageInstance, method: string, args: any[]): Promise<T> {\n\tconst id = instance.deferId++;\n\tif (instance.deferId === Infinity || instance.deferId < 0) {\n\t\tinstance.deferId = 0;\n\t}\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tinstance.defers[id] = { resolve, reject };\n\t});\n\tconst transfers: Transferable[] = [];\n\tif (args[0] instanceof MessagePort) {\n\t\ttransfers.push(args[0]);\n\t}\n\tinstance.port.postMessage({\n\t\tid, method, args\n\t} as MethodCallEventData, transfers);\n\treturn promise;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport type HookCallMessageCallback = (data: MethodCallEventData) => boolean;\n\n/** @internal */\nexport interface ReturnMessageInstance {\n\tport: MessagePort;\n}\n\n/** @internal */\nexport function initializeReturnPort(\n\tport: MessagePort,\n\tpromiseInitialized: Promise<void> | null,\n\ttargetObjectHolder: () => any,\n\thookMessage?: HookCallMessageCallback | undefined\n): ReturnMessageInstance {\n\tconst instance: ReturnMessageInstance = {\n\t\tport: port\n\t};\n\tif (promiseInitialized) {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpromiseInitialized.then(() => processCallMessage(instance.port, data, targetObjectHolder, hookMessage));\n\t\t});\n\t} else {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprocessCallMessage(instance.port, data, targetObjectHolder, hookMessage);\n\t\t});\n\t}\n\tport.start();\n\treturn instance;\n}\n\nfunction processCallMessage(\n\tport: MessagePort,\n\tdata: MethodCallEventData,\n\ttargetObjectHolder: () => any,\n\thook?: HookCallMessageCallback | undefined\n) {\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst target = targetObjectHolder();\n\tif (!target[data.method]) {\n\t\tpostReturnErrorImpl(port, data.id, data.method, new Error('Not implemented'));\n\t} else {\n\t\ttry {\n\t\t\tpostReturnImpl(port, data.id, data.method, target[data.method].apply(target, data.args));\n\t\t} catch (e) {\n\t\t\tpostReturnErrorImpl(port, data.id, data.method, e);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postReturn(instance: ReturnMessageInstance, id: number, method: string, value: any) {\n\tpostReturnImpl(instance.port, id, method, value);\n}\n\nfunction postReturnImpl(port: MessagePort, id: number, method: string, value: any) {\n\tif (value instanceof Promise) {\n\t\tvalue.then((v) => {\n\t\t\tif (id >= 0) {\n\t\t\t\tport.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\tmethod,\n\t\t\t\t\tval: v\n\t\t\t\t} as MethodReturnEventData);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tport.postMessage({\n\t\t\t\tid,\n\t\t\t\tmethod,\n\t\t\t\terror: convertAnyErrorTransferable(error)\n\t\t\t} as MethodReturnEventData);\n\t\t});\n\t} else {\n\t\tport.postMessage({\n\t\t\tid,\n\t\t\tmethod,\n\t\t\tval: value\n\t\t} as MethodReturnEventData);\n\t}\n}\n\n/** @internal */\nexport function postReturnError(instance: ReturnMessageInstance, id: number, method: string, error: any) {\n\tpostReturnErrorImpl(instance.port, id, method, error);\n}\n\nfunction postReturnErrorImpl(port: MessagePort, id: number, method: string, error: any) {\n\tport.postMessage({\n\t\tid,\n\t\tmethod,\n\t\terror: convertAnyErrorTransferable(error)\n\t} as MethodReturnEventData);\n}\n","\nimport Sequencer from './Sequencer';\nimport Synthesizer from './Synthesizer';\nimport SynthesizerSettings from './SynthesizerSettings';\nimport waitForReady from './waitForReady';\n\nimport {\n\tConstants,\n\tSynthesizerStatus\n} from './AudioWorkletNodeSynthesizer';\n\nimport {\n\tinitializeReturnPort,\n\tMethodCallEventData,\n\tpostReturn,\n\tpostReturnError,\n    ReturnMessageInstance\n} from './MethodMessaging';\n\nconst promiseWasmInitialized = waitForReady();\n\n/** Registers processor using Synthesizer for AudioWorklet. */\nexport default function registerAudioWorkletProcessor() {\n\t/**\n\t * The processor using Synthesizer\n\t */\n\tclass Processor extends AudioWorkletProcessor {\n\n\t\tprivate synth: Synthesizer | undefined;\n\t\tprivate _messaging: ReturnMessageInstance;\n\n\t\tconstructor(options: AudioWorkletNodeOptions) {\n\t\t\tsuper(options);\n\n\t\t\tconst settings: SynthesizerSettings | undefined =\n\t\t\t\toptions.processorOptions && options.processorOptions.settings;\n\n\t\t\tconst promiseInitialized = this.doInit(settings);\n\t\t\tthis._messaging = initializeReturnPort(this.port, promiseInitialized, () => this.synth!, (data) => {\n\t\t\t\tswitch (data.method) {\n\t\t\t\t\tcase 'init':\n\t\t\t\t\t\tthis.synth!.init(sampleRate, settings);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'createSequencer':\n\t\t\t\t\t\tthis.doCreateSequencer(data.args[0]).then(() => {\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'hookPlayerMIDIEventsByName':\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconst r = this.doHookPlayerMIDIEvents(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (r) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'callFunction':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis.doCallFunction(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'getSFontObject':\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst name = this.doGetSFontObject(data.args[0], data.args[1]);\n\t\t\t\t\t\t\tif (name !== null) {\n\t\t\t\t\t\t\t\tpostReturn(this._messaging!, data.id, data.method, name);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, new Error('Invalid sfontId'));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tcase 'playPlayer':\n\t\t\t\t\t\tthis.doPlayPlayer(data);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t}\n\n\t\tprivate async doInit(settings?: SynthesizerSettings | undefined) {\n\t\t\tawait promiseWasmInitialized;\n\t\t\tthis.synth = new Synthesizer();\n\t\t\tthis.synth.init(sampleRate, settings);\n\t\t}\n\n\t\tprivate doCreateSequencer(port: MessagePort): Promise<void> {\n\t\t\treturn Synthesizer.createSequencer().then((seq) => {\n\t\t\t\tconst messaging = initializeReturnPort(port, null, () => seq, (data) => {\n\t\t\t\t\t// special handle for Sequencer\n\t\t\t\t\tif (data.method === 'getRaw') {\n\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, (seq as Sequencer).getRaw());\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (data.method === 'registerSequencerClientByName') {\n\t\t\t\t\t\tconst r = this.doRegisterSequencerClient(seq as Sequencer, data.args[0], data.args[1], data.args[2]);\n\t\t\t\t\t\tif (r !== null) {\n\t\t\t\t\t\t\tpostReturn(messaging, data.id, data.method, r);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpostReturnError(messaging, data.id, data.method, new Error('Name not found'));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tprivate doGetSFontObject(port: MessagePort, sfontId: number): string | null {\n\t\t\tconst sfont = this.synth!.getSFontObject(sfontId);\n\t\t\tif (sfont === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tconst messaging = initializeReturnPort(port, null, () => sfont, (data) => {\n\t\t\t\tif (data.method === 'getPresetIterable') {\n\t\t\t\t\tpostReturn(messaging, data.id, data.method, [...sfont.getPresetIterable()]);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t});\n\t\t\treturn sfont.getName();\n\t\t}\n\n\t\tprivate doPlayPlayer(data: MethodCallEventData) {\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.playPlayer().then(() => {\n\t\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t\t} as SynthesizerStatus);\n\t\t\t\tpostReturn(this._messaging!, data.id, data.method, void (0));\n\t\t\t}, (e: unknown) => {\n\t\t\t\tpostReturnError(this._messaging!, data.id, data.method, e);\n\t\t\t})\n\t\t}\n\n\t\tprivate doHookPlayerMIDIEvents(name: string | null | undefined, param: any) {\n\t\t\tif (!name) {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(null);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tthis.synth!.hookPlayerMIDIEvents(fn, param);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate doCallFunction(name: string, param: any) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[name]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\tfn.call(null, this.synth, param);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Error('Name not found');\n\t\t}\n\n\t\tprivate doRegisterSequencerClient(seq: Sequencer, clientName: string, callbackName: string, param: number) {\n\t\t\tconst fn: any = (AudioWorkletGlobalScope[callbackName]);\n\t\t\tif (fn && typeof fn === 'function') {\n\t\t\t\treturn Synthesizer.registerSequencerClient(seq, clientName, fn, param);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic process(_inputs: Float32Array[][], outputs: Float32Array[][]) {\n\t\t\tif (!this.synth) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst syn = this.synth!;\n\t\t\tsyn.render(outputs[0]);\n\t\t\tpostReturn(this._messaging, -1, Constants.UpdateStatus, {\n\t\t\t\tplaying: syn.isPlaying(),\n\t\t\t\tplayerPlaying: syn.isPlayerPlaying()\n\t\t\t} as SynthesizerStatus);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tregisterProcessor(Constants.ProcessorName, Processor);\n}\n","import Synthesizer from \"./Synthesizer\";\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\n/**\n * Returns the Promise object which resolves when the synthesizer engine is ready.\n */\nexport default function waitForReady(): Promise<void> {\n\treturn Synthesizer.waitForWasmInitialized();\n}\n","\nimport registerAudioWorkletProcessor from './registerAudioWorkletProcessor';\n\nimport { rewriteEventData } from './ISequencerEventData';\nimport Synthesizer from './Synthesizer';\n\nAudioWorkletGlobalScope.JSSynth = {\n\trewriteEventData: rewriteEventData,\n\tSynthesizer: Synthesizer\n};\n// deprecated\nAudioWorkletGlobalScope.Fluid = AudioWorkletGlobalScope.JSSynth;\n\nregisterAudioWorkletProcessor();\n"],"names":["MIDIEvent","constructor","_ptr","_module","getType","this","_fluid_midi_event_get_type","setType","value","_fluid_midi_event_set_type","getChannel","_fluid_midi_event_get_channel","setChannel","_fluid_midi_event_set_channel","getKey","_fluid_midi_event_get_key","setKey","_fluid_midi_event_set_key","getVelocity","_fluid_midi_event_get_velocity","setVelocity","_fluid_midi_event_set_velocity","getControl","_fluid_midi_event_get_control","setControl","_fluid_midi_event_set_control","getValue","_fluid_midi_event_get_value","setValue","_fluid_midi_event_set_value","getProgram","_fluid_midi_event_get_program","setProgram","_fluid_midi_event_set_program","getPitch","_fluid_midi_event_get_pitch","setPitch","_fluid_midi_event_set_pitch","setSysEx","data","size","byteLength","ptr","_malloc","Uint8Array","HEAPU8","buffer","set","_fluid_midi_event_set_sysex","setText","_fluid_midi_event_set_text","setLyrics","_fluid_midi_event_set_lyrics","SequencerEventData","getRaw","dispose","_fluid_event_get_type","getSource","_fluid_event_get_source","getDest","_fluid_event_get_dest","_fluid_event_get_channel","_fluid_event_get_key","_fluid_event_get_velocity","_fluid_event_get_control","_fluid_event_get_value","_fluid_event_get_program","getData","_fluid_event_get_data","getDuration","_fluid_event_get_duration","getBank","_fluid_event_get_bank","_fluid_event_get_pitch","getSFontId","_fluid_event_get_sfont_id","AudioWorkletGlobalScope","wasmModule","Module","rewriteEventDataImpl","ev","event","type","_fluid_event_note","channel","key","vel","duration","_fluid_event_noteon","_fluid_event_noteoff","_fluid_event_all_sounds_off","_fluid_event_all_notes_off","_fluid_event_bank_select","bank","_fluid_event_program_change","preset","_fluid_event_program_select","sfontId","_fluid_event_control_change","control","_fluid_event_pitch_bend","_fluid_event_pitch_wheelsens","_fluid_event_modulation","_fluid_event_sustain","_fluid_event_pan","_fluid_event_volume","_fluid_event_reverb_send","_fluid_event_chorus_send","_fluid_event_key_pressure","_fluid_event_channel_pressure","_fluid_event_system_reset","_fluid_event_timer","_removeFunction","fluid_sequencer_get_client_name","fluid_sfont_get_name","fluid_preset_get_name","_addFunction","_fs","fluid_settings_setint","fluid_settings_setnum","fluid_settings_setstr","fluid_synth_error","fluid_synth_sfload","fluid_sequencer_register_client","malloc","free","defaultMIDIEventCallback","promiseWaitForInitialized","makeEvent","_new_fluid_event","_delete_fluid_event","Sequencer","wasmRemoveFunction","removeFunction","cwrap","_seq","_seqId","_clientFuncMap","_initialize","close","_new_fluid_sequencer2","Promise","resolve","Object","keys","forEach","clientIdStr","unregisterClient","Number","_delete_fluid_sequencer","registerSynthesizer","synth","val","_fluid_sequencer_unregister_client","Synthesizer","reject","TypeError","getRawSynthesizer","_fluid_sequencer_register_fluidsynth","clientId","_fluid_event_set_source","_fluid_event_set_dest","_fluid_event_unregistering","_fluid_sequencer_send_now","map","getAllRegisteredClients","c","_fluid_sequencer_count_clients","r","i","id","_fluid_sequencer_get_client_id","name","push","getClientCount","getClientInfo","index","setTimeScale","scale","_fluid_sequencer_set_time_scale","getTimeScale","_fluid_sequencer_get_time_scale","getTick","_fluid_sequencer_get_tick","sendEventAt","tick","isAbsolute","count","_fluid_sequencer_send_at","sendEventToClientAt","sendEventToClientNow","sendEventNow","eventData","removeAllEvents","_fluid_sequencer_remove_events","removeAllEventsFromClient","processSequencer","msecToProcess","_fluid_sequencer_process","setIntervalForSequencer","msec","setInterval","Soundfont","sfontPtr","static","sfont","_fluid_synth_get_sfont_by_id","getName","getPreset","presetNum","presetPtr","_fluid_sfont_get_preset","soundfont","bankNum","_fluid_preset_get_banknum","num","_fluid_preset_get_num","getPresetIterable","reset","_fluid_sfont_iteration_start","next","_fluid_sfont_iteration_next","done","undefined","Symbol","iterator","wasmAddFunction","addFunction","FS","bind","_free","_fluid_synth_handle_midi_event","setBoolValueForSettings","settings","setIntValueForSettings","setNumValueForSettings","_settings","_synth","_player","_playerPlaying","_playerCallbackPtr","_fluidSynthCallback","_buffer","_bufferSize","_numPtr","_gain","mod","addOnPostRunFn","addOnPostRun","calledRun","fn","onRuntimeInitialized","waitForInitialized","isInitialized","createAudioNode","context","frameSize","node","createScriptProcessor","addEventListener","render","outputBuffer","init","sampleRate","_new_fluid_settings","initialGain","chorusActive","chorusDepth","chorusLevel","chorusNr","chorusSpeed","midiChannelCount","setStrValueForSettings","midiBankSelect","minNoteLength","overflowAge","overflowImportantValue","overflowImportantChannels","join","overflowPercussion","overflowReleased","overflowSustained","overflowVolume","polyphony","reverbActive","reverbDamp","reverbLevel","reverbRoomSize","reverbWidth","_new_fluid_synth","_closePlayer","_delete_fluid_synth","_delete_fluid_settings","isPlaying","actualCount","_fluid_synth_get_active_voice_count","baseOffsetOfVoice","offsetOfActiveVoiceCount","structActiveVoiceCount","HEAPU32","console","warn","voiceList","voiceCount","_fluid_synth_get_polyphony","isRunning","voice","getActiveVoiceCount","setInterpolation","ensureInitialized","_fluid_synth_set_interp_method","getGain","setGain","gain","_fluid_synth_set_gain","_fluid_synth_get_gain","setChannelType","isDrum","_fluid_synth_set_channel_type","waitForVoicesStopped","flushFramesAsync","loadSFont","bin","ext","Math","random","ub","writeFile","unlink","Error","unloadSFont","stopPlayer","flushFramesSync","_fluid_synth_sfunload","unloadSFontAsync","then","getSFontObject","getSoundfontById","getSFontBankOffset","_fluid_synth_get_bank_offset","setSFontBankOffset","offset","_fluid_synth_set_bank_offset","outBuffer","frameCount","length","channels","numberOfChannels","sizePerChannel","totalSize","memLeft","memRight","renderRaw","aLeft","Float32Array","aRight","copyToChannel","leftData","getChannelData","rightData","isPlayerPlaying","midiNoteOn","chan","_fluid_synth_noteon","midiNoteOff","_fluid_synth_noteoff","midiKeyPressure","_fluid_synth_key_pressure","midiControl","ctrl","_fluid_synth_cc","midiProgramChange","prognum","_fluid_synth_program_change","midiChannelPressure","_fluid_synth_channel_pressure","midiPitchBend","_fluid_synth_pitch_bend","midiSysEx","len","mem","_fluid_synth_sysex","midiPitchWheelSensitivity","_fluid_synth_pitch_wheel_sens","_fluid_synth_bank_select","midiSFontSelect","_fluid_synth_sfont_select","midiProgramSelect","_fluid_synth_program_select","midiUnsetProgram","_fluid_synth_unset_program","midiProgramReset","_fluid_synth_program_reset","midiSystemReset","_fluid_synth_system_reset","midiAllNotesOff","_fluid_synth_all_notes_off","midiAllSoundsOff","_fluid_synth_all_sounds_off","midiSetChannelType","setReverb","roomsize","damping","width","level","_fluid_synth_set_reverb","setReverbRoomsize","_fluid_synth_set_reverb_roomsize","setReverbDamp","_fluid_synth_set_reverb_damp","setReverbWidth","_fluid_synth_set_reverb_width","setReverbLevel","_fluid_synth_set_reverb_level","setReverbOn","on","_fluid_synth_set_reverb_on","getReverbRoomsize","_fluid_synth_get_reverb_roomsize","getReverbDamp","_fluid_synth_get_reverb_damp","getReverbLevel","_fluid_synth_get_reverb_level","getReverbWidth","_fluid_synth_get_reverb_width","setChorus","speed","depthMillisec","_fluid_synth_set_chorus","setChorusVoiceCount","_fluid_synth_set_chorus_nr","setChorusLevel","_fluid_synth_set_chorus_level","setChorusSpeed","_fluid_synth_set_chorus_speed","setChorusDepth","_fluid_synth_set_chorus_depth","setChorusType","_fluid_synth_set_chorus_type","setChorusOn","_fluid_synth_set_chorus_on","getChorusVoiceCount","_fluid_synth_get_chorus_nr","getChorusLevel","_fluid_synth_get_chorus_level","getChorusSpeed","_fluid_synth_get_chorus_speed","getChorusDepth","_fluid_synth_get_chorus_depth","getChorusType","_fluid_synth_get_chorus_type","getGenerator","param","_fluid_synth_get_gen","setGenerator","_fluid_synth_set_gen","getLegatoMode","_fluid_synth_get_legato_mode","HEAP32","setLegatoMode","mode","_fluid_synth_set_legato_mode","getPortamentoMode","_fluid_synth_get_portamento_mode","setPortamentoMode","_fluid_synth_set_portamento_mode","getBreathMode","_fluid_synth_get_breath_mode","setBreathMode","flags","_fluid_synth_set_breath_mode","resetPlayer","_initPlayer","closePlayer","player","_new_fluid_player","funcPtr","p","_delete_fluid_player","_fluid_player_get_status","addSMFDataToPlayer","ensurePlayerInitialized","_fluid_player_add_mem","playPlayer","_fluid_player_play","resolver","_playerDefer","promise","_fluid_player_stop","_fluid_player_join","retrievePlayerCurrentTick","_fluid_player_get_current_tick","retrievePlayerTotalTicks","_fluid_player_get_total_ticks","retrievePlayerBpm","_fluid_player_get_bpm","retrievePlayerMIDITempo","_fluid_player_get_midi_tempo","seekPlayer","ticks","_fluid_player_seek","hookPlayerMIDIEvents","callback","oldPtr","newPtr","cb","t","makeMIDIEventCallback","_fluid_player_set_playback_callback","_fluid_synth_write_float","nextFrame","setTimeout","head","tail","self","waitForPlayerStopped","seq","time","e","baseName","message","detail","super","stack","convertAnyErrorTransferable","err","result","objList","obj","prototype","unshift","getPrototypeOf","o","getOwnPropertyNames","_e","convertErrorTransferable","initializeReturnPort","port","promiseInitialized","targetObjectHolder","hookMessage","instance","processCallMessage","start","hook","target","method","postReturnImpl","apply","args","postReturnErrorImpl","postReturn","v","postMessage","error","postReturnError","promiseWasmInitialized","waitForWasmInitialized","JSSynth","rewriteEventData","Fluid","Processor","AudioWorkletProcessor","options","processorOptions","doInit","_messaging","doCreateSequencer","doHookPlayerMIDIEvents","doCallFunction","doGetSFontObject","doPlayPlayer","createSequencer","messaging","doRegisterSequencerClient","syn","playing","playerPlaying","call","clientName","callbackName","registerSequencerClient","process","_inputs","outputs","registerProcessor","registerAudioWorkletProcessor"],"sourceRoot":""}