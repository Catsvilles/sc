{"version":3,"file":"js-synthesizer.min.js","mappings":"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","sources":["webpack://JSSynth/webpack/universalModuleDefinition","webpack://JSSynth/webpack/bootstrap","webpack://JSSynth/webpack/runtime/define property getters","webpack://JSSynth/webpack/runtime/hasOwnProperty shorthand","webpack://JSSynth/webpack/runtime/make namespace object","webpack://JSSynth/./src/main/SequencerEventData.ts","webpack://JSSynth/./src/main/PointerType.ts","webpack://JSSynth/./src/main/ISequencerEventData.ts","webpack://JSSynth/./src/main/MessageError.ts","webpack://JSSynth/./src/main/MIDIEvent.ts","webpack://JSSynth/./src/main/Sequencer.ts","webpack://JSSynth/./src/main/Soundfont.ts","webpack://JSSynth/./src/main/Synthesizer.ts","webpack://JSSynth/./src/main/waitForReady.ts","webpack://JSSynth/./src/main/MethodMessaging.ts","webpack://JSSynth/./src/main/WorkletSoundfont.ts","webpack://JSSynth/./src/main/WorkletSequencer.ts","webpack://JSSynth/./src/main/AudioWorkletNodeSynthesizer.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"js-synthesizer\"] = factory();\n\telse\n\t\troot[\"JSSynth\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport { EventType } from './SequencerEvent';\nimport ISequencerEventData from './ISequencerEventData';\nimport PointerType, { INVALID_POINTER } from './PointerType';\n\n/** @internal */\nexport default class SequencerEventData implements ISequencerEventData {\n\t/** @internal */\n\tconstructor(private _ptr: PointerType, private _module: any) {\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._ptr;\n\t}\n\n\t/** @internal */\n\tpublic dispose() {\n\t\tthis._ptr = INVALID_POINTER;\n\t}\n\n\tpublic getType(): EventType {\n\t\tif (this._ptr === INVALID_POINTER) return -1 as any as EventType;\n\t\treturn this._module._fluid_event_get_type(this._ptr);\n\t}\n\tpublic getSource(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_source(this._ptr);\n\t}\n\tpublic getDest(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_dest(this._ptr);\n\t}\n\tpublic getChannel(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_channel(this._ptr);\n\t}\n\tpublic getKey(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_key(this._ptr);\n\t}\n\tpublic getVelocity(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_velocity(this._ptr);\n\t}\n\tpublic getControl(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_control(this._ptr);\n\t}\n\tpublic getValue(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_value(this._ptr);\n\t}\n\tpublic getProgram(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_program(this._ptr);\n\t}\n\tpublic getData(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_data(this._ptr);\n\t}\n\tpublic getDuration(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_duration(this._ptr);\n\t}\n\tpublic getBank(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_bank(this._ptr);\n\t}\n\tpublic getPitch(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_pitch(this._ptr);\n\t}\n\tpublic getSFontId(): number {\n\t\tif (this._ptr === INVALID_POINTER) return -1;\n\t\treturn this._module._fluid_event_get_sfont_id(this._ptr);\n\t}\n}\n","\ntype NullPointerType = number & { _null_pointer_marker: never; };\n\n/** @internal */\ntype PointerType = NullPointerType | (number & { _pointer_marker: never; });\n\nexport default PointerType;\n\ntype UniquePointerType<TMarker extends string> = NullPointerType | (number & {\n\t_pointer_marker: never;\n} & {\n\t[P in TMarker]: never;\n});\nexport { UniquePointerType };\n\nexport const INVALID_POINTER: NullPointerType = 0 as any as NullPointerType;\n","\nimport SequencerEvent, { EventType } from './SequencerEvent';\n\n/** @internal */\nimport PointerType, { INVALID_POINTER } from './PointerType';\n/** @internal */\nimport SequencerEventData from './SequencerEventData';\n\nconst _module: any = typeof AudioWorkletGlobalScope !== 'undefined' ?\n\tAudioWorkletGlobalScope.wasmModule : Module;\n\n/** Event data for sequencer callback. Only available in the callback function due to the instance lifetime. */\nexport default interface ISequencerEventData {\n\t/** Returns the event type */\n\tgetType(): EventType;\n\t/** Returns the source client id of event */\n\tgetSource(): number;\n\t/** Returns the destination client id of event */\n\tgetDest(): number;\n\tgetChannel(): number;\n\tgetKey(): number;\n\tgetVelocity(): number;\n\tgetControl(): number;\n\tgetValue(): number;\n\tgetProgram(): number;\n\tgetData(): number;\n\tgetDuration(): number;\n\tgetBank(): number;\n\tgetPitch(): number;\n\tgetSFontId(): number;\n}\n\n/** @internal */\nexport function rewriteEventDataImpl(ev: PointerType, event: SequencerEvent): boolean {\n\tswitch (event.type) {\n\t\tcase EventType.Note:\n\t\tcase 'note':\n\t\t\t_module._fluid_event_note(ev, event.channel, event.key, event.vel, event.duration);\n\t\t\tbreak;\n\t\tcase EventType.NoteOn:\n\t\tcase 'noteon':\n\t\tcase 'note-on':\n\t\t\t_module._fluid_event_noteon(ev, event.channel, event.key, event.vel);\n\t\t\tbreak;\n\t\tcase EventType.NoteOff:\n\t\tcase 'noteoff':\n\t\tcase 'note-off':\n\t\t\t_module._fluid_event_noteoff(ev, event.channel, event.key);\n\t\t\tbreak;\n\t\tcase EventType.AllSoundsOff:\n\t\tcase 'allsoundsoff':\n\t\tcase 'all-sounds-off':\n\t\t\t_module._fluid_event_all_sounds_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.AllNotesOff:\n\t\tcase 'allnotesoff':\n\t\tcase 'all-notes-off':\n\t\t\t_module._fluid_event_all_notes_off(ev, event.channel);\n\t\t\tbreak;\n\t\tcase EventType.BankSelect:\n\t\tcase 'bankselect':\n\t\tcase 'bank-select':\n\t\t\t_module._fluid_event_bank_select(ev, event.channel, event.bank);\n\t\t\tbreak;\n\t\tcase EventType.ProgramChange:\n\t\tcase 'programchange':\n\t\tcase 'program-change':\n\t\t\t_module._fluid_event_program_change(ev, event.channel, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ProgramSelect:\n\t\tcase 'programselect':\n\t\tcase 'program-select':\n\t\t\t_module._fluid_event_program_select(ev, event.channel, event.sfontId, event.bank, event.preset);\n\t\t\tbreak;\n\t\tcase EventType.ControlChange:\n\t\tcase 'controlchange':\n\t\tcase 'control-change':\n\t\t\t_module._fluid_event_control_change(ev, event.channel, event.control, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchBend:\n\t\tcase 'pitchbend':\n\t\tcase 'pitch-bend':\n\t\t\t_module._fluid_event_pitch_bend(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.PitchWheelSensitivity:\n\t\tcase 'pitchwheelsens':\n\t\tcase 'pitchwheelsensitivity':\n\t\tcase 'pitch-wheel-sens':\n\t\tcase 'pitch-wheel-sensitivity':\n\t\t\t_module._fluid_event_pitch_wheelsens(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Modulation:\n\t\tcase 'modulation':\n\t\t\t_module._fluid_event_modulation(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Sustain:\n\t\tcase 'sustain':\n\t\t\t_module._fluid_event_sustain(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Pan:\n\t\tcase 'pan':\n\t\t\t_module._fluid_event_pan(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.Volume:\n\t\tcase 'volume':\n\t\t\t_module._fluid_event_volume(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ReverbSend:\n\t\tcase 'reverb':\n\t\tcase 'reverbsend':\n\t\tcase 'reverb-send':\n\t\t\t_module._fluid_event_reverb_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChorusSend:\n\t\tcase 'chorus':\n\t\tcase 'chorussend':\n\t\tcase 'chorus-send':\n\t\t\t_module._fluid_event_chorus_send(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.KeyPressure:\n\t\tcase 'keypressure':\n\t\tcase 'key-pressure':\n\t\tcase 'aftertouch':\n\t\t\t_module._fluid_event_key_pressure(ev, event.channel, event.key, event.value);\n\t\t\tbreak;\n\t\tcase EventType.ChannelPressure:\n\t\tcase 'channelpressure':\n\t\tcase 'channel-pressure':\n\t\tcase 'channel-aftertouch':\n\t\t\t_module._fluid_event_channel_pressure(ev, event.channel, event.value);\n\t\t\tbreak;\n\t\tcase EventType.SystemReset:\n\t\tcase 'systemreset':\n\t\tcase 'system-reset':\n\t\t\t_module._fluid_event_system_reset(ev);\n\t\t\tbreak;\n\t\tcase EventType.Timer:\n\t\tcase 'timer':\n\t\t\t_module._fluid_event_timer(ev, event.data);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// 'typeof event' must be 'never' here\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Rewrites event data with specified SequencerEvent object.\n * @param data destination instance\n * @param event source data\n * @return true if succeeded\n */\nexport function rewriteEventData(data: ISequencerEventData, event: SequencerEvent): boolean {\n\tif (!data || !(data instanceof SequencerEventData)) {\n\t\treturn false;\n\t}\n\tconst ev = data.getRaw();\n\tif (ev === INVALID_POINTER) {\n\t\treturn false;\n\t}\n\treturn rewriteEventDataImpl(ev, event);\n}\n","\n/** Error object used for errors occurred in the message receiver (e.g. Worklet) */\nexport default class MessageError extends Error {\n\t/** The name of original error object if available */\n\tpublic baseName: any;\n\t/** Detailed properties of original error object if available */\n\tpublic detail: any;\n\n\tconstructor(baseName: string, message: string, detail?: any) {\n\t\tsuper(message);\n\t\tthis.baseName = baseName;\n\t\tthis.detail = detail;\n\t\tif (detail && detail.stack) {\n\t\t\tthis.stack = detail.stack;\n\t\t}\n\t}\n}\n","\nimport IMIDIEvent from './IMIDIEvent';\nimport PointerType, { UniquePointerType } from './PointerType';\n\n/** @internal */\nexport type MIDIEventType = UniquePointerType<'midi_event'>;\n\n/** @internal */\nexport default class MIDIEvent implements IMIDIEvent {\n\n\t/** @internal */\n\tconstructor(private _ptr: MIDIEventType, private _module: any) {\n\t}\n\n\tpublic getType(): number {\n\t\treturn this._module._fluid_midi_event_get_type(this._ptr);\n\t}\n\tpublic setType(value: number): void {\n\t\tthis._module._fluid_midi_event_set_type(this._ptr, value);\n\t}\n\tpublic getChannel(): number {\n\t\treturn this._module._fluid_midi_event_get_channel(this._ptr);\n\t}\n\tpublic setChannel(value: number): void {\n\t\tthis._module._fluid_midi_event_set_channel(this._ptr, value);\n\t}\n\tpublic getKey(): number {\n\t\treturn this._module._fluid_midi_event_get_key(this._ptr);\n\t}\n\tpublic setKey(value: number): void {\n\t\tthis._module._fluid_midi_event_set_key(this._ptr, value);\n\t}\n\tpublic getVelocity(): number {\n\t\treturn this._module._fluid_midi_event_get_velocity(this._ptr);\n\t}\n\tpublic setVelocity(value: number): void {\n\t\tthis._module._fluid_midi_event_set_velocity(this._ptr, value);\n\t}\n\tpublic getControl(): number {\n\t\treturn this._module._fluid_midi_event_get_control(this._ptr);\n\t}\n\tpublic setControl(value: number): void {\n\t\tthis._module._fluid_midi_event_set_control(this._ptr, value);\n\t}\n\tpublic getValue(): number {\n\t\treturn this._module._fluid_midi_event_get_value(this._ptr);\n\t}\n\tpublic setValue(value: number): void {\n\t\tthis._module._fluid_midi_event_set_value(this._ptr, value);\n\t}\n\tpublic getProgram(): number {\n\t\treturn this._module._fluid_midi_event_get_program(this._ptr);\n\t}\n\tpublic setProgram(value: number): void {\n\t\tthis._module._fluid_midi_event_set_program(this._ptr, value);\n\t}\n\tpublic getPitch(): number {\n\t\treturn this._module._fluid_midi_event_get_pitch(this._ptr);\n\t}\n\tpublic setPitch(value: number): void {\n\t\tthis._module._fluid_midi_event_set_pitch(this._ptr, value);\n\t}\n\n\tpublic setSysEx(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_sysex(this._ptr, ptr, size, 1);\n\t}\n\tpublic setText(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_text(this._ptr, ptr, size, 1);\n\t}\n\tpublic setLyrics(data: Uint8Array): void {\n\t\tconst size = data.byteLength;\n\t\tconst ptr: PointerType = this._module._malloc(size);\n\t\tconst ptrView = new Uint8Array(this._module.HEAPU8.buffer, ptr, size);\n\t\tptrView.set(data);\n\t\tthis._module._fluid_midi_event_set_lyrics(this._ptr, ptr, size, 1);\n\t}\n}\n","\nimport ISequencer, { ClientInfo } from './ISequencer';\nimport ISequencerEventData, { rewriteEventDataImpl } from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SequencerEvent from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\n\nimport Synthesizer from './Synthesizer';\n\ntype SequencerPointer = UniquePointerType<'sequencer_ptr'>;\ntype SequencerId = number;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction removeFunction(funcPtr: number): void;\n}\n\nlet _module: any;\nlet _removeFunction: (funcPtr: number) => void;\n\nlet fluid_sequencer_get_client_name: (seq: number, id: number) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_removeFunction = removeFunction;\n\t}\n\n\tfluid_sequencer_get_client_name =\n\t\t_module.cwrap('fluid_sequencer_get_client_name', 'string', ['number', 'number']);\n}\n\nfunction makeEvent(event: SequencerEvent): PointerType | null {\n\tconst ev = _module._new_fluid_event();\n\tif (!rewriteEventDataImpl(ev, event)) {\n\t\t_module._delete_fluid_event(ev);\n\t\treturn null;\n\t}\n\treturn ev;\n}\n\n/** @internal */\nexport default class Sequencer implements ISequencer {\n\n\tprivate _seq: SequencerPointer;\n\tprivate _seqId: SequencerId;\n\n\t/** @internal */\n\tpublic _clientFuncMap: { [id: number]: number };\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._seq = INVALID_POINTER;\n\t\tthis._seqId = -1;\n\t\tthis._clientFuncMap = {};\n\t}\n\n\t/** @internal */\n\tpublic _initialize(): Promise<void> {\n\t\tthis.close();\n\t\tthis._seq = _module._new_fluid_sequencer2(0);\n\t\tthis._seqId = -1;\n\t\treturn Promise.resolve();\n\t}\n\n\t/** @internal */\n\tpublic getRaw() {\n\t\treturn this._seq;\n\t}\n\n\tpublic close() {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\tObject.keys(this._clientFuncMap).forEach((clientIdStr) => {\n\t\t\t\tthis.unregisterClient(Number(clientIdStr));\n\t\t\t});\n\t\t\tthis.unregisterClient(-1);\n\t\t\t_module._delete_fluid_sequencer(this._seq);\n\t\t\tthis._seq = INVALID_POINTER;\n\t\t}\n\t}\n\n\tpublic registerSynthesizer(synth: ISynthesizer | number): Promise<number> {\n\t\tif (this._seqId !== -1) {\n\t\t\t_module._fluid_sequencer_unregister_client(this._seq, this._seqId);\n\t\t\tthis._seqId = -1;\n\t\t}\n\t\tlet val: number;\n\t\tif (typeof synth === 'number') {\n\t\t\tval = synth;\n\t\t} else if (synth instanceof Synthesizer) {\n\t\t\tval = synth.getRawSynthesizer();\n\t\t} else {\n\t\t\treturn Promise.reject(new TypeError('\\'synth\\' is not a compatible type instance'));\n\t\t}\n\n\t\tthis._seqId = _module._fluid_sequencer_register_fluidsynth(this._seq, val);\n\t\treturn Promise.resolve(this._seqId);\n\t}\n\n\tpublic unregisterClient(clientId: number): void {\n\t\tif (clientId === -1) {\n\t\t\tclientId = this._seqId;\n\t\t\tif (clientId === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// send 'unregistering' event\n\t\tconst ev = _module._new_fluid_event();\n\t\t_module._fluid_event_set_source(ev, -1);\n\t\t_module._fluid_event_set_dest(ev, clientId);\n\t\t_module._fluid_event_unregistering(ev);\n\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t_module._delete_fluid_event(ev);\n\n\t\t_module._fluid_sequencer_unregister_client(this._seq, clientId);\n\t\tif (this._seqId === clientId) {\n\t\t\tthis._seqId = -1;\n\t\t} else {\n\t\t\tconst map = this._clientFuncMap;\n\t\t\tif (map[clientId]) {\n\t\t\t\t_removeFunction(map[clientId]);\n\t\t\t\tdelete map[clientId];\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getAllRegisteredClients(): Promise<ClientInfo[]> {\n\t\tconst c = _module._fluid_sequencer_count_clients(this._seq);\n\t\tconst r: ClientInfo[] = [];\n\t\tfor (let i = 0; i < c; ++i) {\n\t\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\t\tr.push({ clientId: id, name: name });\n\t\t}\n\t\treturn Promise.resolve(r);\n\t}\n\n\tpublic getClientCount(): Promise<number> {\n\t\treturn Promise.resolve<number>(_module._fluid_sequencer_count_clients(this._seq));\n\t}\n\n\tpublic getClientInfo(index: number): Promise<ClientInfo> {\n\t\tconst id = _module._fluid_sequencer_get_client_id(this._seq, index);\n\t\tconst name = fluid_sequencer_get_client_name(this._seq, id);\n\t\treturn Promise.resolve<ClientInfo>({ clientId: id, name: name });\n\t}\n\n\tpublic setTimeScale(scale: number): void {\n\t\t_module._fluid_sequencer_set_time_scale(this._seq, scale);\n\t}\n\n\tpublic getTimeScale(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_time_scale(this._seq));\n\t}\n\n\tpublic getTick(): Promise<number> {\n\t\treturn Promise.resolve(_module._fluid_sequencer_get_tick(this._seq));\n\t}\n\n\tpublic sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t// send to all clients\n\t\t\tconst count = _module._fluid_sequencer_count_clients(this._seq);\n\t\t\tfor (let i = 0; i < count; ++i) {\n\t\t\t\tconst id: number = _module._fluid_sequencer_get_client_id(this._seq, i);\n\t\t\t\t_module._fluid_event_set_dest(ev, id);\n\t\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t}\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\tpublic sendEventToClientAt(clientId: number, event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_at(this._seq, ev, tick, isAbsolute ? 1 : 0);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventToClientNow(clientId: number, event: SequencerEvent): void {\n\t\tconst ev = makeEvent(event);\n\t\tif (ev !== null) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t\t_module._delete_fluid_event(ev);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic sendEventNow(clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(eventData instanceof SequencerEventData)) {\n\t\t\treturn;\n\t\t}\n\t\tconst ev = eventData.getRaw();\n\t\tif (ev !== INVALID_POINTER) {\n\t\t\t_module._fluid_event_set_dest(ev, clientId === -1 ? this._seqId : clientId);\n\t\t\t_module._fluid_sequencer_send_now(this._seq, ev);\n\t\t}\n\t}\n\n\tpublic removeAllEvents(): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, -1, -1);\n\t}\n\n\tpublic removeAllEventsFromClient(clientId: number): void {\n\t\t_module._fluid_sequencer_remove_events(this._seq, -1, clientId === -1 ? this._seqId : clientId, -1);\n\t}\n\n\tpublic processSequencer(msecToProcess: number) {\n\t\tif (this._seq !== INVALID_POINTER) {\n\t\t\t_module._fluid_sequencer_process(this._seq, msecToProcess);\n\t\t}\n\t}\n\n\t/** @internal */\n\tpublic setIntervalForSequencer(msec: number) {\n\t\treturn setInterval(() => this.processSequencer(msec), msec);\n\t}\n}\n","import { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport Preset from './Preset';\nimport Synthesizer from './Synthesizer';\n\ntype SFontPointer = UniquePointerType<'sfont_ptr'>;\ntype PresetPointer = UniquePointerType<'preset_ptr'>;\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\nlet _module: any;\n\nlet fluid_sfont_get_name: (sfont: SFontPointer) => string;\nlet fluid_preset_get_name: (preset: PresetPointer) => string;\n\nfunction bindFunctions() {\n\tif (_module) {\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t} else {\n\t\t_module = Module;\n\t}\n\n\tfluid_sfont_get_name =\n\t\t_module.cwrap('fluid_sfont_get_name', 'string', ['number']);\n\tfluid_preset_get_name =\n\t\t_module.cwrap('fluid_preset_get_name', 'string', ['number']);\n}\n\nexport default class Soundfont {\n\tprivate readonly _ptr: SFontPointer;\n\n\t// @internal\n\tpublic constructor(sfontPtr: SFontPointer) {\n\t\tthis._ptr = sfontPtr;\n\t}\n\n\tpublic static getSoundfontById(synth: Synthesizer, id: number): Soundfont | null {\n\t\tbindFunctions();\n\n\t\tconst sfont = _module._fluid_synth_get_sfont_by_id(synth.getRawSynthesizer(), id);\n\t\tif (sfont === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new Soundfont(sfont);\n\t}\n\n\tpublic getName(): string {\n\t\treturn fluid_sfont_get_name(this._ptr);\n\t}\n\n\tpublic getPreset(bank: number, presetNum: number): Preset | null {\n\t\tconst presetPtr: PresetPointer = _module._fluid_sfont_get_preset(this._ptr, bank, presetNum);\n\t\tif (presetPtr === INVALID_POINTER) {\n\t\t\treturn null;\n\t\t}\n\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\treturn {\n\t\t\tsoundfont: this,\n\t\t\tname,\n\t\t\tbankNum,\n\t\t\tnum\n\t\t};\n\t}\n\n\tpublic getPresetIterable(): Iterable<Preset> {\n\t\tconst reset = () => {\n\t\t\t_module._fluid_sfont_iteration_start(this._ptr);\n\t\t};\n\t\tconst next = (): IteratorResult<Preset, void> => {\n\t\t\tconst presetPtr = _module._fluid_sfont_iteration_next(this._ptr);\n\t\t\tif (presetPtr === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tdone: true,\n\t\t\t\t\tvalue: undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst name = fluid_preset_get_name(presetPtr);\n\t\t\t\tconst bankNum = _module._fluid_preset_get_banknum(presetPtr);\n\t\t\t\tconst num = _module._fluid_preset_get_num(presetPtr);\n\t\t\t\treturn {\n\t\t\t\t\tdone: false,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tsoundfont: this,\n\t\t\t\t\t\tname,\n\t\t\t\t\t\tbankNum,\n\t\t\t\t\t\tnum\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t\tconst iterator = (): Iterator<Preset> => {\n\t\t\treset();\n\t\t\treturn {\n\t\t\t\tnext,\n\t\t\t};\n\t\t};\n\t\treturn {\n\t\t\t[Symbol.iterator]: iterator,\n\t\t};\n\t}\n}\n","\nimport {\n\tSynthesizerDefaultValues,\n\tInterpolationValues,\n\tChorusModulation,\n\tGeneratorTypes,\n\tLegatoMode,\n\tPortamentoMode\n} from './Constants';\nimport IMIDIEvent from './IMIDIEvent';\nimport ISequencer from './ISequencer';\nimport ISequencerEventData from './ISequencerEventData';\nimport ISynthesizer from './ISynthesizer';\nimport PointerType, { INVALID_POINTER, UniquePointerType } from './PointerType';\nimport SynthesizerSettings from './SynthesizerSettings';\n\nimport MIDIEvent, { MIDIEventType } from './MIDIEvent';\nimport Sequencer from './Sequencer';\nimport SequencerEvent, { EventType as SequencerEventType } from './SequencerEvent';\nimport SequencerEventData from './SequencerEventData';\nimport Soundfont from './Soundfont';\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n\tfunction addFunction(func: Function, sig: string): number;\n\tfunction removeFunction(funcPtr: number): void;\n\tfunction addOnPostRun(cb: (Module: any) => void): void;\n}\n\ntype SettingsId = UniquePointerType<'settings_id'>;\ntype SynthId = UniquePointerType<'synth_id'>;\ntype PlayerId = UniquePointerType<'player_id'>;\n\nlet _module: any;\nlet _addFunction: (func: Function, sig: string) => number;\nlet _removeFunction: (funcPtr: number) => void;\nlet _fs: any;\n\n// wrapper to use String type\nlet fluid_settings_setint: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setnum: (settings: SettingsId, name: string, val: number) => number;\nlet fluid_settings_setstr: (settings: SettingsId, name: string, str: string) => number;\nlet fluid_synth_error: undefined | ((synth: SynthId) => string);\nlet fluid_synth_sfload: (synth: SynthId, filename: string, reset_presets: number) => number;\nlet fluid_sequencer_register_client: (seq: PointerType, name: string, callback: number, data: number) => number;\n\nlet malloc: (size: number) => PointerType;\nlet free: (ptr: PointerType) => void;\n\nlet defaultMIDIEventCallback: (data: PointerType, event: MIDIEventType) => number;\n\nfunction bindFunctions() {\n\tif (fluid_synth_error) {\n\t\t// (already bound)\n\t\treturn;\n\t}\n\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\t_module = AudioWorkletGlobalScope.wasmModule;\n\t\t_addFunction = AudioWorkletGlobalScope.wasmAddFunction;\n\t\t_removeFunction = AudioWorkletGlobalScope.wasmRemoveFunction;\n\t} else {\n\t\t_module = Module;\n\t\t_addFunction = addFunction;\n\t\t_removeFunction = removeFunction;\n\t}\n\t_fs = _module.FS;\n\n\t// wrapper to use String type\n\tfluid_settings_setint =\n\t\t_module.cwrap('fluid_settings_setint', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setnum =\n\t\t_module.cwrap('fluid_settings_setnum', 'number', ['number', 'string', 'number']);\n\tfluid_settings_setstr =\n\t\t_module.cwrap('fluid_settings_setstr', 'number', ['number', 'string', 'string']);\n\tfluid_synth_error =\n\t\t_module.cwrap('fluid_synth_error', 'string', ['number']);\n\tfluid_synth_sfload =\n\t\t_module.cwrap('fluid_synth_sfload', 'number', ['number', 'string', 'number']);\n\tfluid_sequencer_register_client =\n\t\t_module.cwrap('fluid_sequencer_register_client', 'number', ['number', 'string', 'number', 'number']);\n\n\tmalloc = _module._malloc.bind(_module);\n\tfree = _module._free.bind(_module);\n\n\tdefaultMIDIEventCallback = _module._fluid_synth_handle_midi_event.bind(_module);\n}\n\nlet promiseWaitForInitialized: Promise<void> | undefined;\nfunction waitForInitialized() {\n\tif (promiseWaitForInitialized) {\n\t\treturn promiseWaitForInitialized;\n\t}\n\n\tlet mod: any;\n\tlet addOnPostRunFn: ((cb: (Module: any) => void) => void) | undefined;\n\tif (typeof AudioWorkletGlobalScope !== 'undefined') {\n\t\tmod = AudioWorkletGlobalScope.wasmModule;\n\t\taddOnPostRunFn = AudioWorkletGlobalScope.addOnPostRun;\n\t} else {\n\t\tmod = Module;\n\t\taddOnPostRunFn = typeof addOnPostRun !== 'undefined' ? addOnPostRun : undefined;\n\t}\n\tif (mod.calledRun) {\n\t\tpromiseWaitForInitialized = Promise.resolve();\n\t\treturn promiseWaitForInitialized;\n\t}\n\tif (typeof addOnPostRunFn === 'undefined') {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\tconst fn: (() => void) | undefined = _module.onRuntimeInitialized;\n\t\t\t_module.onRuntimeInitialized = () => {\n\t\t\t\tresolve();\n\t\t\t\tif (fn) {\n\t\t\t\t\tfn();\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t} else {\n\t\tpromiseWaitForInitialized = new Promise((resolve) => {\n\t\t\taddOnPostRunFn!(resolve);\n\t\t});\n\t}\n\treturn promiseWaitForInitialized;\n}\n\nfunction setBoolValueForSettings(settings: SettingsId, name: string, value: boolean | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value ? 1 : 0);\n\t}\n}\nfunction setIntValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setint(settings, name, value);\n\t}\n}\nfunction setNumValueForSettings(settings: SettingsId, name: string, value: number | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setnum(settings, name, value);\n\t}\n}\nfunction setStrValueForSettings(settings: SettingsId, name: string, value: string | undefined) {\n\tif (typeof value !== 'undefined') {\n\t\tfluid_settings_setstr(settings, name, value);\n\t}\n}\n\nfunction getActiveVoiceCount(synth: SynthId): number {\n\tconst actualCount = _module._fluid_synth_get_active_voice_count(synth);\n\tif (!actualCount) {\n\t\treturn 0;\n\t}\n\n\t// FluidSynth may return incorrect value for active voice count,\n\t// so check internal data and correct it\n\n\t// check if the structure is not changed\n\t// for fluidsynth 2.0.x-2.1.x:\n\t//   140 === offset [synth->voice]\n\t//   144 === offset [synth->active_voice_count] for \n\t// for fluidsynth 2.2.x:\n\t//   144 === offset [synth->voice]\n\t//   148 === offset [synth->active_voice_count]\n\t// first check 2.1.x structure\n\tlet baseOffsetOfVoice = 140;\n\tlet offsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\tlet structActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\tif (structActiveVoiceCount !== actualCount) {\n\t\t// add 4 for 2.2.x\n\t\tbaseOffsetOfVoice += 4;\n\t\toffsetOfActiveVoiceCount = (synth + baseOffsetOfVoice + 4) >> 2;\n\t\tstructActiveVoiceCount = _module.HEAPU32[offsetOfActiveVoiceCount];\n\t\tif (structActiveVoiceCount !== actualCount) {\n\t\t\t// unknown structure\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t\t);\n\t\t\treturn actualCount;\n\t\t}\n\t}\n\n\tconst voiceList = _module.HEAPU32[(synth + baseOffsetOfVoice) >> 2];\n\t// (voice should not be NULL)\n\tif (!voiceList || voiceList >= _module.HEAPU32.byteLength) {\n\t\t// unknown structure\n\t\tconst c = console;\n\t\tc.warn(\n\t\t\t'js-synthesizer: cannot check synthesizer internal data (may be changed)'\n\t\t);\n\t\treturn actualCount;\n\t}\n\n\t// count of internal voice data is restricted to polyphony value\n\tconst voiceCount = _module._fluid_synth_get_polyphony(synth);\n\tlet isRunning = false;\n\tfor (let i = 0; i < voiceCount; ++i) {\n\t\t// auto voice = voiceList[i]\n\t\tconst voice = _module.HEAPU32[(voiceList >> 2) + i];\n\t\tif (!voice) {\n\t\t\tcontinue;\n\t\t}\n\t\t// offset [voice->status]\n\t\tconst status = _module.HEAPU8[voice + 4];\n\t\t// 4: FLUID_VOICE_OFF\n\t\tif (status !== 4) {\n\t\t\tisRunning = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!isRunning) {\n\t\tif (structActiveVoiceCount !== 0) {\n\t\t\tconst c = console;\n\t\t\tc.warn(\n\t\t\t\t'js-synthesizer: Active voice count is not zero, but all voices are off:',\n\t\t\t\tstructActiveVoiceCount,\n\t\t\t);\n\t\t}\n\t\t_module.HEAPU32[offsetOfActiveVoiceCount] = 0;\n\t\treturn 0;\n\t}\n\n\treturn actualCount;\n}\n\nfunction makeRandomFileName(type: string, ext: string) {\n\treturn `/${type}-r${Math.random() * 65535}-${Math.random() * 65535}${ext}`;\n}\n\n/** Hook callback function type */\nexport interface HookMIDIEventCallback {\n\t/**\n\t * Hook callback function type.\n\t * @param synth the base synthesizer instance\n\t * @param eventType MIDI event type (e.g. 0x90 is note-on event)\n\t * @param eventData detailed event data\n\t * @param param parameter data passed to the registration method\n\t * @return true if the event data is processed, or false if the default processing is necessary\n\t */\n\t(synth: Synthesizer, eventType: number, eventData: IMIDIEvent, param: any): boolean;\n}\n\n/** Client callback function type for sequencer object */\nexport interface SequencerClientCallback {\n\t/**\n\t * Client callback function type for sequencer object.\n\t * @param time the sequencer tick value\n\t * @param eventType sequencer event type\n\t * @param event actual event data (can only be used in this callback function)\n\t * @param sequencer the base sequencer object\n\t * @param param parameter data passed to the registration method\n\t */\n\t(time: number, eventType: SequencerEventType, event: ISequencerEventData, sequencer: ISequencer, param: number): void;\n}\n\nfunction makeMIDIEventCallback(synth: Synthesizer, cb: HookMIDIEventCallback, param: any) {\n\treturn (data: PointerType, event: MIDIEventType): number => {\n\t\tconst t = _module._fluid_midi_event_get_type(event);\n\t\tif (cb(synth, t, new MIDIEvent(event, _module), param)) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn _module._fluid_synth_handle_midi_event(data, event);\n\t};\n}\n\n/** Default implementation of ISynthesizer */\nexport default class Synthesizer implements ISynthesizer {\n\t/** @internal */\n\tprivate _settings: SettingsId;\n\t/** @internal */\n\tprivate _synth: SynthId;\n\t/** @internal */\n\tprivate _player: PlayerId;\n\t/** @internal */\n\tprivate _playerPlaying: boolean;\n\t/** @internal */\n\tprivate _playerDefer: undefined | {\n\t\tpromise: Promise<void>;\n\t\tresolve: () => void;\n\t};\n\t/** @internal */\n\tprivate _playerCallbackPtr: number | null;\n\t/** @internal */\n\tprivate _fluidSynthCallback: PointerType | null;\n\n\t/** @internal */\n\tprivate _buffer: PointerType;\n\t/** @internal */\n\tprivate _bufferSize: number;\n\t/** @internal */\n\tprivate _numPtr: PointerType;\n\n\t/** @internal */\n\tprivate _gain: number;\n\n\tconstructor() {\n\t\tbindFunctions();\n\n\t\tthis._settings = INVALID_POINTER;\n\t\tthis._synth = INVALID_POINTER;\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerPlaying = false;\n\t\tthis._playerCallbackPtr = null;\n\t\tthis._fluidSynthCallback = null;\n\n\t\tthis._buffer = INVALID_POINTER;\n\t\tthis._bufferSize = 0;\n\t\tthis._numPtr = INVALID_POINTER;\n\n\t\tthis._gain = SynthesizerDefaultValues.Gain;\n\t}\n\n\t/** Return the promise object that resolves when WebAssembly has been initialized */\n\tpublic static waitForWasmInitialized(): Promise<void> {\n\t\treturn waitForInitialized();\n\t}\n\n\tpublic isInitialized() {\n\t\treturn this._synth !== INVALID_POINTER;\n\t}\n\n\t/** Return the raw synthesizer instance value (pointer for libfluidsynth). */\n\tpublic getRawSynthesizer(): number {\n\t\treturn this._synth;\n\t}\n\n\tpublic createAudioNode(context: AudioContext, frameSize?: number): AudioNode {\n\t\tconst node = context.createScriptProcessor(frameSize, 0, 2);\n\t\tnode.addEventListener('audioprocess', (ev) => {\n\t\t\tthis.render(ev.outputBuffer);\n\t\t});\n\t\treturn node;\n\t}\n\n\tpublic init(sampleRate: number, settings?: SynthesizerSettings) {\n\t\tthis.close();\n\n\t\tconst set = this._settings = _module._new_fluid_settings();\n\t\tfluid_settings_setnum(set, 'synth.sample-rate', sampleRate);\n\t\tif (settings) {\n\t\t\tif (typeof settings.initialGain !== 'undefined') {\n\t\t\t\tthis._gain = settings.initialGain;\n\t\t\t}\n\t\t\tsetBoolValueForSettings(set, 'synth.chorus.active', settings.chorusActive);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.depth', settings.chorusDepth);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.level', settings.chorusLevel);\n\t\t\tsetIntValueForSettings(set, 'synth.chorus.nr', settings.chorusNr);\n\t\t\tsetNumValueForSettings(set, 'synth.chorus.speed', settings.chorusSpeed);\n\t\t\tsetIntValueForSettings(set, 'synth.midi-channels', settings.midiChannelCount);\n\t\t\tsetStrValueForSettings(set, 'synth.midi-bank-select', settings.midiBankSelect);\n\t\t\tsetIntValueForSettings(set, 'synth.min-note-length', settings.minNoteLength);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.age', settings.overflowAge);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.important', settings.overflowImportantValue);\n\t\t\tif (typeof settings.overflowImportantChannels !== 'undefined') {\n\t\t\t\tfluid_settings_setstr(\n\t\t\t\t\tset,\n\t\t\t\t\t'synth.overflow.important-channels',\n\t\t\t\t\tsettings.overflowImportantChannels.join(',')\n\t\t\t\t);\n\t\t\t}\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.percussion', settings.overflowPercussion);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.released', settings.overflowReleased);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.sustained', settings.overflowSustained);\n\t\t\tsetNumValueForSettings(set, 'synth.overflow.volume', settings.overflowVolume);\n\t\t\tsetIntValueForSettings(set, 'synth.polyphony', settings.polyphony);\n\t\t\tsetBoolValueForSettings(set, 'synth.reverb.active', settings.reverbActive);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.damp', settings.reverbDamp);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.level', settings.reverbLevel);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.room-size', settings.reverbRoomSize);\n\t\t\tsetNumValueForSettings(set, 'synth.reverb.width', settings.reverbWidth);\n\t\t}\n\t\tfluid_settings_setnum(set, 'synth.gain', this._gain);\n\n\t\tthis._synth = _module._new_fluid_synth(this._settings);\n\n\t\tthis._numPtr = malloc(8);\n\t}\n\n\tpublic close() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis._closePlayer();\n\t\t_module._delete_fluid_synth(this._synth);\n\t\tthis._synth = INVALID_POINTER;\n\t\t_module._delete_fluid_settings(this._settings);\n\t\tthis._settings = INVALID_POINTER;\n\t\tfree(this._numPtr);\n\t\tthis._numPtr = INVALID_POINTER;\n\t}\n\n\tpublic isPlaying() {\n\t\treturn this._synth !== INVALID_POINTER &&\n\t\t\tgetActiveVoiceCount(this._synth) > 0;\n\t}\n\n\tpublic setInterpolation(value: InterpolationValues, channel?: number) {\n\t\tthis.ensureInitialized();\n\t\tif (typeof channel === 'undefined') {\n\t\t\tchannel = -1;\n\t\t}\n\t\t_module._fluid_synth_set_interp_method(this._synth, channel, value);\n\t}\n\n\tpublic getGain() {\n\t\treturn this._gain;\n\t}\n\n\tpublic setGain(gain: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_gain(this._synth, gain);\n\t\tthis._gain = _module._fluid_synth_get_gain(this._synth);\n\t}\n\n\tpublic setChannelType(channel: number, isDrum: boolean) {\n\t\tthis.ensureInitialized();\n\t\t// CHANNEL_TYPE_MELODIC = 0, CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, channel, isDrum ? 1 : 0);\n\t}\n\n\tpublic waitForVoicesStopped() {\n\t\treturn this.flushFramesAsync();\n\t}\n\n\tpublic loadSFont(bin: ArrayBuffer) {\n\t\tthis.ensureInitialized();\n\n\t\tconst name = makeRandomFileName('sfont', '.sf2');\n\t\tconst ub = new Uint8Array(bin);\n\n\t\t_fs.writeFile(name, ub);\n\t\tconst sfont = fluid_synth_sfload(this._synth, name, 1);\n\t\t_fs.unlink(name);\n\t\treturn sfont === -1 ?\n\t\t\tPromise.reject(new Error(fluid_synth_error!(this._synth))) :\n\t\t\tPromise.resolve(sfont);\n\t}\n\n\tpublic unloadSFont(id: number) {\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\tthis.flushFramesSync();\n\n\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t}\n\n\tpublic unloadSFontAsync(id: number) {\n\t\t// not throw with Promise.reject\n\t\tthis.ensureInitialized();\n\t\tthis.stopPlayer();\n\t\treturn this.flushFramesAsync().then(() => {\n\t\t\t_module._fluid_synth_sfunload(this._synth, id, 1);\n\t\t});\n\t}\n\n\t/**\n\t * Returns the `Soundfont` instance for specified SoundFont.\n\t * @param sfontId loaded SoundFont id ({@link loadSFont} returns this)\n\t * @return `Soundfont` instance or `null` if `sfontId` is not valid or loaded\n\t */\n\tpublic getSFontObject(sfontId: number): Soundfont | null {\n\t\treturn Soundfont.getSoundfontById(this, sfontId);\n\t}\n\n\tpublic getSFontBankOffset(id: number) {\n\t\tthis.ensureInitialized();\n\t\treturn Promise.resolve(_module._fluid_synth_get_bank_offset(this._synth, id) as number);\n\t}\n\tpublic setSFontBankOffset(id: number, offset: number) {\n\t\tthis.ensureInitialized();\n\t\t_module._fluid_synth_set_bank_offset(this._synth, id, offset);\n\t}\n\t\n\tpublic render(outBuffer: AudioBuffer | Float32Array[]) {\n\t\tconst frameCount = 'numberOfChannels' in outBuffer ? outBuffer.length : outBuffer[0].length;\n\t\tconst channels = 'numberOfChannels' in outBuffer ? outBuffer.numberOfChannels : outBuffer.length;\n\t\tconst sizePerChannel = 4 * frameCount;\n\t\tconst totalSize = sizePerChannel * 2;\n\t\tif (this._bufferSize < totalSize) {\n\t\t\tif (this._buffer !== INVALID_POINTER) {\n\t\t\t\tfree(this._buffer);\n\t\t\t}\n\t\t\tthis._buffer = malloc(totalSize);\n\t\t\tthis._bufferSize = totalSize;\n\t\t}\n\n\t\tconst memLeft = this._buffer;\n\t\tconst memRight = (this._buffer as number + sizePerChannel) as PointerType;\n\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\n\t\tconst aLeft = new Float32Array(_module.HEAPU8.buffer, memLeft, frameCount);\n\t\tconst aRight = channels >= 2 ? new Float32Array(_module.HEAPU8.buffer, memRight, frameCount) : null;\n\t\tif ('numberOfChannels' in outBuffer) {\n\t\t\tif (outBuffer.copyToChannel) {\n\t\t\t\toutBuffer.copyToChannel(aLeft, 0, 0);\n\t\t\t\tif (aRight) {\n\t\t\t\t\toutBuffer.copyToChannel(aRight, 1, 0);\n\t\t\t\t}\n\t\t\t} else { // copyToChannel API not exist in Safari AudioBuffer\n\t\t\t\tconst leftData = outBuffer.getChannelData(0);\n\t\t\t\taLeft.forEach((val, i)=> leftData[i] = val);\n\t\t\t\tif (aRight) {\n\t\t\t\t\tconst rightData = outBuffer.getChannelData(1);\n\t\t\t\t\taRight.forEach((val, i)=> rightData[i] = val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toutBuffer[0].set(aLeft);\n\t\t\tif (aRight) {\n\t\t\t\toutBuffer[1].set(aRight);\n\t\t\t}\n\t\t}\n\n\t\t// check and update player status\n\t\tthis.isPlayerPlaying();\n\t}\n\n\tpublic midiNoteOn(chan: number, key: number, vel: number) {\n\t\t_module._fluid_synth_noteon(this._synth, chan, key, vel);\n\t}\n\tpublic midiNoteOff(chan: number, key: number) {\n\t\t_module._fluid_synth_noteoff(this._synth, chan, key);\n\t}\n\tpublic midiKeyPressure(chan: number, key: number, val: number) {\n\t\t_module._fluid_synth_key_pressure(this._synth, chan, key, val);\n\t}\n\tpublic midiControl(chan: number, ctrl: number, val: number) {\n\t\t_module._fluid_synth_cc(this._synth, chan, ctrl, val);\n\t}\n\tpublic midiProgramChange(chan: number, prognum: number) {\n\t\t_module._fluid_synth_program_change(this._synth, chan, prognum);\n\t}\n\tpublic midiChannelPressure(chan: number, val: number) {\n\t\t_module._fluid_synth_channel_pressure(this._synth, chan, val);\n\t}\n\tpublic midiPitchBend(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_bend(this._synth, chan, val);\n\t}\n\tpublic midiSysEx(data: Uint8Array) {\n\t\tconst len = data.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(data, mem);\n\t\t_module._fluid_synth_sysex(this._synth, mem, len,\n\t\t\tINVALID_POINTER, INVALID_POINTER, INVALID_POINTER, 0);\n\t\tfree(mem);\n\t}\n\n\tpublic midiPitchWheelSensitivity(chan: number, val: number) {\n\t\t_module._fluid_synth_pitch_wheel_sens(this._synth, chan, val);\n\t}\n\tpublic midiBankSelect(chan: number, bank: number) {\n\t\t_module._fluid_synth_bank_select(this._synth, chan, bank);\n\t}\n\tpublic midiSFontSelect(chan: number, sfontId: number) {\n\t\t_module._fluid_synth_sfont_select(this._synth, chan, sfontId);\n\t}\n\tpublic midiProgramSelect(chan: number, sfontId: number, bank: number, presetNum: number) {\n\t\t_module._fluid_synth_program_select(this._synth, chan, sfontId, bank, presetNum);\n\t}\n\tpublic midiUnsetProgram(chan: number) {\n\t\t_module._fluid_synth_unset_program(this._synth, chan);\n\t}\n\tpublic midiProgramReset() {\n\t\t_module._fluid_synth_program_reset(this._synth);\n\t}\n\tpublic midiSystemReset() {\n\t\t_module._fluid_synth_system_reset(this._synth);\n\t}\n\tpublic midiAllNotesOff(chan?: number) {\n\t\t_module._fluid_synth_all_notes_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiAllSoundsOff(chan?: number) {\n\t\t_module._fluid_synth_all_sounds_off(this._synth, typeof chan === 'undefined' ? -1 : chan);\n\t}\n\tpublic midiSetChannelType(chan: number, isDrum: boolean) {\n\t\t// CHANNEL_TYPE_MELODIC = 0\n\t\t// CHANNEL_TYPE_DRUM = 1\n\t\t_module._fluid_synth_set_channel_type(this._synth, chan, isDrum ? 1 : 0);\n\t}\n\n\t/**\n\t * Set reverb parameters to the synthesizer.\n\t */\n\tpublic setReverb(roomsize: number, damping: number, width: number, level: number) {\n\t\t_module._fluid_synth_set_reverb(this._synth, roomsize, damping, width, level);\n\t}\n\t/**\n\t * Set reverb roomsize parameter to the synthesizer.\n\t */\n\tpublic setReverbRoomsize(roomsize: number) {\n\t\t_module._fluid_synth_set_reverb_roomsize(this._synth, roomsize);\n\t}\n\t/**\n\t * Set reverb damping parameter to the synthesizer.\n\t */\n\tpublic setReverbDamp(damping: number) {\n\t\t_module._fluid_synth_set_reverb_damp(this._synth, damping);\n\t}\n\t/**\n\t * Set reverb width parameter to the synthesizer.\n\t */\n\tpublic setReverbWidth(width: number) {\n\t\t_module._fluid_synth_set_reverb_width(this._synth, width);\n\t}\n\t/**\n\t * Set reverb level to the synthesizer.\n\t */\n\tpublic setReverbLevel(level: number) {\n\t\t_module._fluid_synth_set_reverb_level(this._synth, level);\n\t}\n\t/**\n\t * Enable or disable reverb effect of the synthesizer.\n\t */\n\tpublic setReverbOn(on: boolean) {\n\t\t_module._fluid_synth_set_reverb_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get reverb roomsize parameter of the synthesizer.\n\t */\n\tpublic getReverbRoomsize(): number {\n\t\treturn _module._fluid_synth_get_reverb_roomsize(this._synth);\n\t}\n\t/**\n\t * Get reverb damping parameter of the synthesizer.\n\t */\n\tpublic getReverbDamp(): number {\n\t\treturn _module._fluid_synth_get_reverb_damp(this._synth);\n\t}\n\t/**\n\t * Get reverb level of the synthesizer.\n\t */\n\tpublic getReverbLevel(): number {\n\t\treturn _module._fluid_synth_get_reverb_level(this._synth);\n\t}\n\t/**\n\t * Get reverb width parameter of the synthesizer.\n\t */\n\tpublic getReverbWidth(): number {\n\t\treturn _module._fluid_synth_get_reverb_width(this._synth);\n\t}\n\n\t/**\n\t * Set chorus parameters to the synthesizer.\n\t */\n\tpublic setChorus(voiceCount: number, level: number, speed: number, depthMillisec: number, type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus(this._synth, voiceCount, level, speed, depthMillisec, type);\n\t}\n\t/**\n\t * Set chorus voice count parameter to the synthesizer.\n\t */\n\tpublic setChorusVoiceCount(voiceCount: number) {\n\t\t_module._fluid_synth_set_chorus_nr(this._synth, voiceCount);\n\t}\n\t/**\n\t * Set chorus level parameter to the synthesizer.\n\t */\n\tpublic setChorusLevel(level: number) {\n\t\t_module._fluid_synth_set_chorus_level(this._synth, level);\n\t}\n\t/**\n\t * Set chorus speed parameter to the synthesizer.\n\t */\n\tpublic setChorusSpeed(speed: number) {\n\t\t_module._fluid_synth_set_chorus_speed(this._synth, speed);\n\t}\n\t/**\n\t * Set chorus depth parameter to the synthesizer.\n\t */\n\tpublic setChorusDepth(depthMillisec: number) {\n\t\t_module._fluid_synth_set_chorus_depth(this._synth, depthMillisec);\n\t}\n\t/**\n\t * Set chorus modulation type to the synthesizer.\n\t */\n\tpublic setChorusType(type: ChorusModulation) {\n\t\t_module._fluid_synth_set_chorus_type(this._synth, type);\n\t}\n\t/**\n\t * Enable or disable chorus effect of the synthesizer.\n\t */\n\tpublic setChorusOn(on: boolean) {\n\t\t_module._fluid_synth_set_chorus_on(this._synth, on ? 1 : 0);\n\t}\n\t/**\n\t * Get chorus voice count of the synthesizer.\n\t */\n\tpublic getChorusVoiceCount(): number {\n\t\treturn _module._fluid_synth_get_chorus_nr(this._synth);\n\t}\n\t/**\n\t * Get chorus level of the synthesizer.\n\t */\n\tpublic getChorusLevel(): number {\n\t\treturn _module._fluid_synth_get_chorus_level(this._synth);\n\t}\n\t/**\n\t * Get chorus speed of the synthesizer.\n\t */\n\tpublic getChorusSpeed(): number {\n\t\treturn _module._fluid_synth_get_chorus_speed(this._synth);\n\t}\n\t/**\n\t * Get chorus depth (in milliseconds) of the synthesizer.\n\t */\n\tpublic getChorusDepth(): number {\n\t\treturn _module._fluid_synth_get_chorus_depth(this._synth);\n\t}\n\t/**\n\t * Get chorus modulation type of the synthesizer.\n\t */\n\tpublic getChorusType(): ChorusModulation {\n\t\treturn _module._fluid_synth_get_chorus_type(this._synth);\n\t}\n\n\t/**\n\t * Get generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @return a value related to the generator\n\t */\n\tpublic getGenerator(channel: number, param: GeneratorTypes): number {\n\t\treturn _module._fluid_synth_get_gen(this._synth, channel, param);\n\t}\n\t/**\n\t * Set generator value assigned to the MIDI channel.\n\t * @param channel MIDI channel number\n\t * @param param generator ID\n\t * @param value a value related to the generator\n\t */\n\tpublic setGenerator(channel: number, param: GeneratorTypes, value: number) {\n\t\t_module._fluid_synth_set_gen(this._synth, channel, param, value);\n\t}\n\t/**\n\t * Return the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return legato mode\n\t */\n\tpublic getLegatoMode(channel: number) {\n\t\t_module._fluid_synth_get_legato_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as LegatoMode;\n\t}\n\t/**\n\t * Set the current legato mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode legato mode\n\t */\n\tpublic setLegatoMode(channel: number, mode: LegatoMode) {\n\t\t_module._fluid_synth_set_legato_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return portamento mode\n\t */\n\tpublic getPortamentoMode(channel: number) {\n\t\t_module._fluid_synth_get_portamento_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as PortamentoMode;\n\t}\n\t/**\n\t * Set the current portamento mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param mode portamento mode\n\t */\n\tpublic setPortamentoMode(channel: number, mode: PortamentoMode) {\n\t\t_module._fluid_synth_set_portamento_mode(this._synth, channel, mode);\n\t}\n\t/**\n\t * Return the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @return breath mode (BreathFlags)\n\t */\n\tpublic getBreathMode(channel: number) {\n\t\t_module._fluid_synth_get_breath_mode(this._synth, channel, this._numPtr);\n\t\treturn _module.HEAP32[(this._numPtr as number) >> 2] as number;\n\t}\n\t/**\n\t * Set the current breath mode of the channel.\n\t * @param channel MIDI channel number\n\t * @param flags breath mode flags (BreathFlags)\n\t */\n\tpublic setBreathMode(channel: number, flags: number) {\n\t\t_module._fluid_synth_set_breath_mode(this._synth, channel, flags);\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\n\tpublic resetPlayer() {\n\t\treturn new Promise<void>((resolve) => {\n\t\t\tthis._initPlayer();\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tpublic closePlayer() {\n\t\tthis._closePlayer();\n\t}\n\n\t/** @internal */\n\tprivate _initPlayer() {\n\t\tthis._closePlayer();\n\n\t\tconst player = _module._new_fluid_player(this._synth);\n\t\tthis._player = player;\n\t\tif (player !== INVALID_POINTER) {\n\t\t\tif (this._fluidSynthCallback === null) {\n\t\t\t\t// hacky retrieve 'fluid_synth_handle_midi_event' callback pointer\n\t\t\t\t// * 'playback_callback' is filled with 'fluid_synth_handle_midi_event' by default.\n\t\t\t\t// * 'playback_userdata' is filled with the synthesizer pointer by default\n\t\t\t\tconst funcPtr: PointerType = _module.HEAPU32[((player as number) + 588) >> 2]; // _fluid_player_t::playback_callback\n\t\t\t\tconst synthPtr: SynthId = _module.HEAPU32[((player as number) + 592) >> 2];    // _fluid_player_t::playback_userdata\n\t\t\t\tif (synthPtr === this._synth) {\n\t\t\t\t\tthis._fluidSynthCallback = funcPtr;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error('Out of memory');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate _closePlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER) {\n\t\t\treturn;\n\t\t}\n\t\tthis.stopPlayer();\n\t\t_module._delete_fluid_player(p);\n\t\tthis._player = INVALID_POINTER;\n\t\tthis._playerCallbackPtr = null;\n\t}\n\n\tpublic isPlayerPlaying() {\n\t\tif (this._playerPlaying) {\n\t\t\tconst status = _module._fluid_player_get_status(this._player);\n\t\t\tif (status === 1 /*FLUID_PLAYER_PLAYING*/) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tthis.stopPlayer();\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic addSMFDataToPlayer(bin: ArrayBuffer) {\n\t\tthis.ensurePlayerInitialized();\n\t\tconst len = bin.byteLength;\n\t\tconst mem = malloc(len);\n\t\t_module.HEAPU8.set(new Uint8Array(bin), mem);\n\t\tconst r: number = _module._fluid_player_add_mem(this._player, mem, len);\n\t\tfree(mem);\n\t\treturn r !== -1 ? Promise.resolve() : Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t}\n\n\tpublic playPlayer() {\n\t\tthis.ensurePlayerInitialized();\n\t\tif (this._playerPlaying) {\n\t\t\tthis.stopPlayer();\n\t\t}\n\n\t\tif (_module._fluid_player_play(this._player) === -1) {\n\t\t\treturn Promise.reject(new Error(fluid_synth_error!(this._synth)));\n\t\t}\n\t\tthis._playerPlaying = true;\n\t\tlet resolver = () => { };\n\t\tconst p = new Promise<void>((resolve) => {\n\t\t\tresolver = resolve;\n\t\t});\n\t\tthis._playerDefer = {\n\t\t\tpromise: p,\n\t\t\tresolve: resolver\n\t\t};\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic stopPlayer() {\n\t\tconst p = this._player;\n\t\tif (p === INVALID_POINTER || !this._playerPlaying) {\n\t\t\treturn;\n\t\t}\n\t\t_module._fluid_player_stop(p);\n\t\t_module._fluid_player_join(p);\n\t\t_module._fluid_synth_all_sounds_off(this._synth, -1);\n\t\tif (this._playerDefer) {\n\t\t\tthis._playerDefer.resolve();\n\t\t\tthis._playerDefer = void (0);\n\t\t}\n\t\tthis._playerPlaying = false;\n\t}\n\n\tpublic retrievePlayerCurrentTick(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_current_tick(this._player));\n\t}\n\tpublic retrievePlayerTotalTicks(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_total_ticks(this._player));\n\t}\n\tpublic retrievePlayerBpm(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_bpm(this._player));\n\t}\n\tpublic retrievePlayerMIDITempo(): Promise<number> {\n\t\tthis.ensurePlayerInitialized();\n\t\treturn Promise.resolve(_module._fluid_player_get_midi_tempo(this._player));\n\t}\n\tpublic seekPlayer(ticks: number): void {\n\t\tthis.ensurePlayerInitialized();\n\t\t_module._fluid_player_seek(this._player, ticks);\n\t}\n\n\t/**\n\t * Hooks MIDI events sent by the player.\n\t * initPlayer() must be called before calling this method.\n\t * @param callback hook callback function, or null to unhook\n\t * @param param any additional data passed to the callback\n\t */\n\tpublic hookPlayerMIDIEvents(callback: HookMIDIEventCallback | null, param?: any) {\n\t\tthis.ensurePlayerInitialized();\n\n\t\tconst oldPtr = this._playerCallbackPtr;\n\t\tif (oldPtr === null && callback === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst newPtr = (\n\t\t\t// if callback is specified, add function\n\t\t\tcallback !== null ? _addFunction(makeMIDIEventCallback(this, callback, param), 'iii') : (\n\t\t\t\t// if _fluidSynthCallback is filled, set null to use it for reset callback\n\t\t\t\t// if not, add function defaultMIDIEventCallback for reset\n\t\t\t\tthis._fluidSynthCallback !== null ? null : _addFunction(defaultMIDIEventCallback, 'iii')\n\t\t\t)\n\t\t);\n\t\t// the third parameter of 'fluid_player_set_playback_callback' should be 'fluid_synth_t*'\n\t\tif (oldPtr !== null && newPtr !== null) {\n\t\t\t// (using defaultMIDIEventCallback also comes here)\n\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t_removeFunction(oldPtr);\n\t\t} else {\n\t\t\tif (newPtr === null) {\n\t\t\t\t// newPtr === null --> use _fluidSynthCallback\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, this._fluidSynthCallback!, this._synth);\n\t\t\t\t_removeFunction(oldPtr!);\n\t\t\t} else {\n\t\t\t\t_module._fluid_player_set_playback_callback(this._player, newPtr, this._synth);\n\t\t\t}\n\t\t}\n\t\tthis._playerCallbackPtr = newPtr;\n\t}\n\n\t/** @internal */\n\tprivate ensureInitialized() {\n\t\tif (this._synth === INVALID_POINTER) {\n\t\t\tthrow new Error('Synthesizer is not initialized');\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate ensurePlayerInitialized() {\n\t\tthis.ensureInitialized();\n\t\tif (this._player === INVALID_POINTER) {\n\t\t\tthis._initPlayer();\n\t\t}\n\t}\n\n\t/** @internal */\n\tprivate renderRaw(memLeft: PointerType, memRight: PointerType, frameCount: number) {\n\t\t_module._fluid_synth_write_float(this._synth, frameCount, memLeft, 0, 1, memRight, 0, 1);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesSync() {\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\twhile (this.isPlaying()) {\n\t\t\tthis.renderRaw(memLeft, memRight, frameCount);\n\t\t}\n\t\tfree(mem);\n\t}\n\n\t/** @internal */\n\tprivate flushFramesAsync() {\n\t\tif (!this.isPlaying()) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\tconst frameCount = 65536;\n\t\tconst size = 4 * frameCount;\n\t\tconst mem = malloc(size * 2);\n\t\tconst memLeft = mem;\n\t\tconst memRight = (mem as number + size) as PointerType;\n\t\tconst nextFrame = (\n\t\t\ttypeof setTimeout !== 'undefined' ?\n\t\t\t\t() => {\n\t\t\t\t\treturn new Promise<void>((resolve) => setTimeout(resolve, 0));\n\t\t\t\t} :\n\t\t\t\t() => {\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t);\n\t\tfunction head(): Promise<void> {\n\t\t\treturn nextFrame().then(tail);\n\t\t}\n\t\tconst self = this;\n\t\tfunction tail(): Promise<void> {\n\t\t\tif (!self.isPlaying()) {\n\t\t\t\tfree(mem);\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\t\t\tself.renderRaw(memLeft, memRight, frameCount);\n\t\t\treturn head();\n\t\t}\n\t\treturn head();\n\t}\n\n\tpublic waitForPlayerStopped() {\n\t\treturn this._playerDefer ? this._playerDefer.promise : Promise.resolve();\n\t}\n\n\t/**\n\t * Create the sequencer object for this class.\n\t */\n\tpublic static createSequencer(): Promise<ISequencer> {\n\t\tbindFunctions();\n\t\tconst seq = new Sequencer();\n\t\treturn seq._initialize().then(() => seq);\n\t}\n\n\t/**\n\t * Registers the user-defined client to the sequencer.\n\t * The client can receive events in the time from sequencer process.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param name the client name\n\t * @param callback the client callback function that processes event data\n\t * @param param additional parameter passed to the callback\n\t * @return registered sequencer client id (can be passed to seq.unregisterClient())\n\t */\n\tpublic static registerSequencerClient(seq: ISequencer, name: string, callback: SequencerClientCallback, param: number): number {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tconst ptr = _addFunction((time: number, ev: PointerType, _seq: number, data: number) => {\n\t\t\tconst e = new SequencerEventData(ev, _module);\n\t\t\tconst type: SequencerEventType = _module._fluid_event_get_type(ev);\n\t\t\tcallback(time, type, e, seq, data);\n\t\t}, 'viiii');\n\t\tconst r = fluid_sequencer_register_client(seq.getRaw(), name, ptr, param);\n\t\tif (r !== -1) {\n\t\t\tseq._clientFuncMap[r] = ptr;\n\t\t}\n\t\treturn r;\n\t}\n\n\t/**\n\t * Send sequencer event immediately to the specific client.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param event event data\n\t */\n\tpublic static sendEventToClientNow(seq: ISequencer, clientId: number, event: SequencerEvent): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventToClientNow(clientId, event);\n\t}\n\t/**\n\t * (Re-)send event data immediately.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param clientId registered client id (-1 for registered synthesizer)\n\t * @param eventData event data which can be retrieved in SequencerClientCallback\n\t */\n\tpublic static sendEventNow(seq: ISequencer, clientId: number, eventData: ISequencerEventData): void {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\tseq.sendEventNow(clientId, eventData);\n\t}\n\t/**\n\t * Set interval timer process to call processSequencer for this sequencer.\n\t * This method uses 'setInterval' global method to register timer.\n\t * @param seq the sequencer instance created by Synthesizer.createSequencer\n\t * @param msec time in milliseconds passed to both setInterval and processSequencer\n\t * @return return value of 'setInterval' (usually passing to 'clearInterval' will reset event)\n\t */\n\tpublic static setIntervalForSequencer(seq: ISequencer, msec: number) {\n\t\tif (!(seq instanceof Sequencer)) {\n\t\t\tthrow new TypeError('Invalid sequencer instance');\n\t\t}\n\t\treturn seq.setIntervalForSequencer(msec);\n\t}\n}\n","import Synthesizer from \"./Synthesizer\";\n\n/** @internal */\ndeclare global {\n\tvar Module: any;\n}\n\n/**\n * Returns the Promise object which resolves when the synthesizer engine is ready.\n */\nexport default function waitForReady(): Promise<void> {\n\treturn Synthesizer.waitForWasmInitialized();\n}\n","\nimport MessageError from './MessageError';\n\nexport interface MethodCallEventData {\n\tid: number;\n\tmethod: string;\n\targs: any[];\n}\n\nexport interface MethodReturnEventData {\n\tid: number;\n\tmethod: string;\n\tval: any;\n\terror?: MessageErrorData;\n}\n\nexport interface MessageErrorData {\n\tbaseName: string;\n\tmessage: string;\n\tdetail: any;\n}\n\n/** @internal */\nexport interface Defer<T> {\n\tresolve(value: T): void;\n\treject(reason: any): void;\n}\n\n/** @internal */\nexport interface DeferMap {\n\t[id: number]: Defer<any>;\n}\n\n/** @internal */\nexport type HookReturnMessageCallback = (data: MethodReturnEventData) => boolean;\n\n/** @internal */\nexport interface CallMessageInstance {\n\tport: MessagePort;\n\tdefers: DeferMap;\n\tdeferId: number;\n}\n\n/** @internal */\nexport function initializeCallPort(\n\tport: MessagePort,\n\thookMessage?: HookReturnMessageCallback | undefined\n): CallMessageInstance {\n\tconst instance: CallMessageInstance = {\n\t\tport: port,\n\t\tdefers: {},\n\t\tdeferId: 0\n\t};\n\tport.addEventListener('message', (e) => processReturnMessage(instance.defers, hookMessage, e));\n\tport.start();\n\treturn instance;\n}\n\nfunction convertErrorTransferable(err: Error): MessageErrorData {\n\tconst result: any = {};\n\tconst objList: any[] = [];\n\tlet obj: any = err;\n\twhile (obj && obj !== Object.prototype) {\n\t\tobjList.unshift(obj);\n\t\tobj = Object.getPrototypeOf(obj);\n\t}\n\tobjList.forEach((o) => {\n\t\tObject.getOwnPropertyNames(o).forEach((key) => {\n\t\t\ttry {\n\t\t\t\tconst data = (err as any)[key];\n\t\t\t\tif (typeof data !== 'function' && typeof data !== 'symbol') {\n\t\t\t\t\tresult[key] = data;\n\t\t\t\t}\n\t\t\t} catch (_e) { }\n\t\t});\n\t});\n\treturn {\n\t\tbaseName: err.name,\n\t\tmessage: err.message,\n\t\tdetail: result\n\t};\n}\n\nfunction convertAnyErrorTransferable(err: any): MessageErrorData {\n\treturn convertErrorTransferable((err && err instanceof Error) ? err : new Error(`${err}`));\n}\n\nfunction makeMessageError(error: MessageErrorData): MessageError {\n\treturn new MessageError(error.baseName, error.message, error.detail);\n}\n\nfunction processReturnMessage(defers: DeferMap, hook: HookReturnMessageCallback | undefined, e: MessageEvent) {\n\tconst data: MethodReturnEventData = e.data;\n\tif (!data) {\n\t\treturn;\n\t}\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst defer = defers[data.id];\n\tif (defer) {\n\t\tdelete defers[data.id];\n\t\tif (data.error) {\n\t\t\tdefer.reject(makeMessageError(data.error));\n\t\t} else {\n\t\t\tdefer.resolve(data.val);\n\t\t}\n\t} else {\n\t\tif (data.error) {\n\t\t\tthrow makeMessageError(data.error);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postCall(instance: CallMessageInstance, method: string, args: any[]): void;\n\n/** @internal */\nexport function postCall({ port }: CallMessageInstance, method: string, args: any[]) {\n\tport.postMessage({\n\t\tid: -1, method, args\n\t} as MethodCallEventData);\n}\n\n/** @internal */\nexport function postCallWithPromise<T>(instance: CallMessageInstance, method: string, args: any[]): Promise<T> {\n\tconst id = instance.deferId++;\n\tif (instance.deferId === Infinity || instance.deferId < 0) {\n\t\tinstance.deferId = 0;\n\t}\n\tconst promise = new Promise<T>((resolve, reject) => {\n\t\tinstance.defers[id] = { resolve, reject };\n\t});\n\tconst transfers: Transferable[] = [];\n\tif (args[0] instanceof MessagePort) {\n\t\ttransfers.push(args[0]);\n\t}\n\tinstance.port.postMessage({\n\t\tid, method, args\n\t} as MethodCallEventData, transfers);\n\treturn promise;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport type HookCallMessageCallback = (data: MethodCallEventData) => boolean;\n\n/** @internal */\nexport interface ReturnMessageInstance {\n\tport: MessagePort;\n}\n\n/** @internal */\nexport function initializeReturnPort(\n\tport: MessagePort,\n\tpromiseInitialized: Promise<void> | null,\n\ttargetObjectHolder: () => any,\n\thookMessage?: HookCallMessageCallback | undefined\n): ReturnMessageInstance {\n\tconst instance: ReturnMessageInstance = {\n\t\tport: port\n\t};\n\tif (promiseInitialized) {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tpromiseInitialized.then(() => processCallMessage(instance.port, data, targetObjectHolder, hookMessage));\n\t\t});\n\t} else {\n\t\tport.addEventListener('message', (e) => {\n\t\t\tconst data = e.data;\n\t\t\tif (!data) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprocessCallMessage(instance.port, data, targetObjectHolder, hookMessage);\n\t\t});\n\t}\n\tport.start();\n\treturn instance;\n}\n\nfunction processCallMessage(\n\tport: MessagePort,\n\tdata: MethodCallEventData,\n\ttargetObjectHolder: () => any,\n\thook?: HookCallMessageCallback | undefined\n) {\n\tif (hook && hook(data)) {\n\t\treturn;\n\t}\n\tconst target = targetObjectHolder();\n\tif (!target[data.method]) {\n\t\tpostReturnErrorImpl(port, data.id, data.method, new Error('Not implemented'));\n\t} else {\n\t\ttry {\n\t\t\tpostReturnImpl(port, data.id, data.method, target[data.method].apply(target, data.args));\n\t\t} catch (e) {\n\t\t\tpostReturnErrorImpl(port, data.id, data.method, e);\n\t\t}\n\t}\n}\n\n/** @internal */\nexport function postReturn(instance: ReturnMessageInstance, id: number, method: string, value: any) {\n\tpostReturnImpl(instance.port, id, method, value);\n}\n\nfunction postReturnImpl(port: MessagePort, id: number, method: string, value: any) {\n\tif (value instanceof Promise) {\n\t\tvalue.then((v) => {\n\t\t\tif (id >= 0) {\n\t\t\t\tport.postMessage({\n\t\t\t\t\tid,\n\t\t\t\t\tmethod,\n\t\t\t\t\tval: v\n\t\t\t\t} as MethodReturnEventData);\n\t\t\t}\n\t\t}, (error) => {\n\t\t\tport.postMessage({\n\t\t\t\tid,\n\t\t\t\tmethod,\n\t\t\t\terror: convertAnyErrorTransferable(error)\n\t\t\t} as MethodReturnEventData);\n\t\t});\n\t} else {\n\t\tport.postMessage({\n\t\t\tid,\n\t\t\tmethod,\n\t\t\tval: value\n\t\t} as MethodReturnEventData);\n\t}\n}\n\n/** @internal */\nexport function postReturnError(instance: ReturnMessageInstance, id: number, method: string, error: any) {\n\tpostReturnErrorImpl(instance.port, id, method, error);\n}\n\nfunction postReturnErrorImpl(port: MessagePort, id: number, method: string, error: any) {\n\tport.postMessage({\n\t\tid,\n\t\tmethod,\n\t\terror: convertAnyErrorTransferable(error)\n\t} as MethodReturnEventData);\n}\n","import Preset from './Preset';\n\nimport * as MethodMessaging from './MethodMessaging';\n\nexport default class WorkletSoundfont {\n\t// @internal\n\tprivate _messaging: MethodMessaging.CallMessageInstance;\n\n\t// @internal\n\tpublic constructor(port: MessagePort, private readonly name: string) {\n\t\tthis._messaging = MethodMessaging.initializeCallPort(port);\n\t}\n\n\tpublic getName(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic getPreset(bank: number, presetNum: number): Promise<Preset | null> {\n\t\treturn MethodMessaging.postCallWithPromise(this._messaging, 'getPreset', [bank, presetNum]);\n\t}\n\n\tpublic getPresetIterable(): Promise<Iterable<Preset>> {\n\t\treturn MethodMessaging.postCallWithPromise<Preset[]>(this._messaging, 'getPresetIterable', []);\n\t}\n}\n","\nimport ISequencer, { ClientInfo } from './ISequencer';\nimport ISynthesizer from './ISynthesizer';\nimport SequencerEvent from './SequencerEvent';\n\nimport AudioWorkletNodeSynthesizer from './AudioWorkletNodeSynthesizer';\n\nimport * as MethodMessaging from './MethodMessaging';\n\n/** @internal */\nexport default class WorkletSequencer implements ISequencer {\n\t/** @internal */\n\tprivate _messaging: MethodMessaging.CallMessageInstance | null;\n\n\tconstructor(port: MessagePort) {\n\t\tthis._messaging = MethodMessaging.initializeCallPort(port);\n\t}\n\n\t/** @internal */\n\tpublic getRaw(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getRaw', []);\n\t}\n\t/** @internal */\n\tpublic registerSequencerClientByName(clientName: string, callbackName: string, param: number): Promise<number> {\n\t\treturn this.getRaw().then((seqPtr) => MethodMessaging.postCallWithPromise<number>(\n\t\t\tthis._messaging!,\n\t\t\t'registerSequencerClientByName',\n\t\t\t[seqPtr, clientName, callbackName, param]\n\t\t));\n\t}\n\n\tpublic close(): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'close', []);\n\t}\n\tpublic registerSynthesizer(synth: ISynthesizer | number): Promise<number> {\n\t\tlet val: Promise<number>;\n\t\tif (synth instanceof AudioWorkletNodeSynthesizer) {\n\t\t\tval = synth._getRawSynthesizer();\n\t\t} else {\n\t\t\treturn Promise.reject(new TypeError('\\'synth\\' is not a compatible type instance'));\n\t\t}\n\t\treturn val.then((v) => MethodMessaging.postCallWithPromise<number>(this._messaging!, 'registerSynthesizer', [v]));\n\t}\n\tpublic unregisterClient(clientId: number): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'unregisterClient', [clientId]);\n\t}\n\tpublic getAllRegisteredClients(): Promise<ClientInfo[]> {\n\t\treturn MethodMessaging.postCallWithPromise<ClientInfo[]>(this._messaging!, 'getAllRegisteredClients', []);\n\t}\n\tpublic getClientCount(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getClientCount', []);\n\t}\n\tpublic getClientInfo(index: number): Promise<ClientInfo> {\n\t\treturn MethodMessaging.postCallWithPromise<ClientInfo>(this._messaging!, 'getClientInfo', [index]);\n\t}\n\tpublic setTimeScale(scale: number): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'setTimeScale', [scale]);\n\t}\n\tpublic getTimeScale(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getTimeScale', []);\n\t}\n\tpublic getTick(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getTick', []);\n\t}\n\tpublic sendEventAt(event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'sendEventAt', [event, tick, isAbsolute]);\n\t}\n\tpublic sendEventToClientAt(clientId: number, event: SequencerEvent, tick: number, isAbsolute: boolean): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'sendEventToClientAt', [clientId, event, tick, isAbsolute]);\n\t}\n\tpublic removeAllEvents(): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'removeAllEvents', []);\n\t}\n\tpublic removeAllEventsFromClient(clientId: number): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'removeAllEventsFromClient', [clientId]);\n\t}\n\n\tpublic processSequencer(msecToProcess: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'processSequencer', [msecToProcess]);\n\t}\n}\n","\nimport { SynthesizerDefaultValues, InterpolationValues } from './Constants';\nimport ISequencer from './ISequencer';\nimport ISynthesizer from './ISynthesizer';\nimport SynthesizerSettings from './SynthesizerSettings';\nimport WorkletSoundfont from './WorkletSoundfont';\n\nimport WorkletSequencer from './WorkletSequencer';\n\nimport * as MethodMessaging from './MethodMessaging';\n\n/** @internal */\nexport const enum Constants {\n\tProcessorName = 'fluid-js',\n\tUpdateStatus = 'updateStatus',\n}\n/** @internal */\nexport interface SynthesizerStatus {\n\tplaying: boolean;\n\tplayerPlaying: boolean;\n}\n\n/** An synthesizer object with AudioWorkletNode */\nexport default class AudioWorkletNodeSynthesizer implements ISynthesizer {\n\n\t/** @internal */\n\tprivate _status: SynthesizerStatus;\n\t/** @internal */\n\tprivate _messaging: MethodMessaging.CallMessageInstance | null;\n\t/** @internal */\n\tprivate _node: AudioWorkletNode | null;\n\t/** @internal */\n\tprivate _gain: number;\n\n\tconstructor() {\n\t\tthis._status = {\n\t\t\tplaying: false,\n\t\t\tplayerPlaying: false\n\t\t};\n\t\tthis._messaging = null;\n\t\tthis._node = null;\n\t\tthis._gain = SynthesizerDefaultValues.Gain;\n\t}\n\n\t/** Audio node for this synthesizer */\n\tpublic get node(): AudioWorkletNode | null {\n\t\treturn this._node;\n\t}\n\n\t/**\n\t * Create AudiWorkletNode instance\n\t */\n\tpublic createAudioNode(context: AudioContext, settings?: SynthesizerSettings) {\n\t\tconst node = new AudioWorkletNode(context, Constants.ProcessorName, {\n\t\t\tnumberOfInputs: 0,\n\t\t\tnumberOfOutputs: 1,\n\t\t\tchannelCount: 2,\n\t\t\toutputChannelCount: [2],\n\t\t\tprocessorOptions: {\n\t\t\t\tsettings: settings\n\t\t\t}\n\t\t});\n\t\tthis._node = node;\n\n\t\tthis._messaging = MethodMessaging.initializeCallPort(node.port, (data) => {\n\t\t\tif (data.method === Constants.UpdateStatus) {\n\t\t\t\tthis._status = data.val;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\treturn node;\n\t}\n\n\tpublic isInitialized() {\n\t\treturn this._messaging !== null;\n\t}\n\n\tpublic init(_sampleRate: number, _settings?: SynthesizerSettings) {\n\t}\n\n\tpublic close() {\n\t\t// call init instead of close\n\t\tMethodMessaging.postCall(this._messaging!, 'init', [0]);\n\t}\n\n\tpublic isPlaying() {\n\t\treturn this._status.playing;\n\t}\n\n\tpublic setInterpolation(value: InterpolationValues, channel?: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'setInterpolation', [value, channel]);\n\t}\n\n\tpublic getGain() {\n\t\treturn this._gain;\n\t}\n\n\tpublic setGain(gain: number) {\n\t\tthis._gain = gain;\n\t\tMethodMessaging.postCallWithPromise<void>(this._messaging!, 'setGain', [gain]).then(() => {\n\t\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getGain', []);\n\t\t}).then((value) => {\n\t\t\tthis._gain = value;\n\t\t});\n\t}\n\n\tpublic setChannelType(channel: number, isDrum: boolean) {\n\t\tMethodMessaging.postCall(this._messaging!, 'setChannelType', [channel, isDrum]);\n\t}\n\n\tpublic waitForVoicesStopped() {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'waitForVoicesStopped', []);\n\t}\n\n\tpublic loadSFont(bin: ArrayBuffer) {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'loadSFont', [bin]);\n\t}\n\n\tpublic unloadSFont(id: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'unloadSFont', [id]);\n\t}\n\n\tpublic unloadSFontAsync(id: number) {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'unloadSFont', [id]);\n\t}\n\n\t/**\n\t * Returns the `Soundfont` instance for specified SoundFont.\n\t * @param sfontId loaded SoundFont id ({@link loadSFont} returns this)\n\t * @return resolve with `Soundfont` instance (rejected if `sfontId` is not valid or loaded)\n\t */\n\tpublic getSFontObject(sfontId: number): Promise<WorkletSoundfont> {\n\t\tconst channel = new MessageChannel();\n\t\treturn MethodMessaging.postCallWithPromise<string>(this._messaging!, 'getSFontObject', [channel.port2, sfontId]).then((name) => {\n\t\t\treturn new WorkletSoundfont(channel.port1, name);\n\t\t});\n\t}\n\n\tpublic getSFontBankOffset(id: number) {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getSFontBankOffset', [id]);\n\t}\n\tpublic setSFontBankOffset(id: number, offset: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'setSFontBankOffset', [id, offset]);\n\t}\n\n\tpublic render() {\n\t\tthrow new Error('Unexpected call');\n\t}\n\n\tpublic midiNoteOn(chan: number, key: number, vel: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiNoteOn', [chan, key, vel]);\n\t}\n\tpublic midiNoteOff(chan: number, key: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiNoteOff', [chan, key]);\n\t}\n\tpublic midiKeyPressure(chan: number, key: number, val: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiKeyPressure', [chan, key, val]);\n\t}\n\tpublic midiControl(chan: number, ctrl: number, val: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiControl', [chan, ctrl, val]);\n\t}\n\tpublic midiProgramChange(chan: number, prognum: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiProgramChange', [chan, prognum]);\n\t}\n\tpublic midiChannelPressure(chan: number, val: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiChannelPressure', [chan, val]);\n\t}\n\tpublic midiPitchBend(chan: number, val: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiPitchBend', [chan, val]);\n\t}\n\tpublic midiSysEx(data: Uint8Array) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiSysEx', [data]);\n\t}\n\n\tpublic midiPitchWheelSensitivity(chan: number, val: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiPitchWheelSensitivity', [chan, val]);\n\t}\n\tpublic midiBankSelect(chan: number, bank: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiBankSelect', [chan, bank]);\n\t}\n\tpublic midiSFontSelect(chan: number, sfontId: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiSFontSelect', [chan, sfontId]);\n\t}\n\tpublic midiProgramSelect(chan: number, sfontId: number, bank: number, presetNum: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiProgramSelect', [chan, sfontId, bank, presetNum]);\n\t}\n\tpublic midiUnsetProgram(chan: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiUnsetProgram', [chan]);\n\t}\n\tpublic midiProgramReset() {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiProgramReset', []);\n\t}\n\tpublic midiSystemReset() {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiSystemReset', []);\n\t}\n\tpublic midiAllNotesOff(chan?: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiAllNotesOff', [chan]);\n\t}\n\tpublic midiAllSoundsOff(chan?: number) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiAllSoundsOff', [chan]);\n\t}\n\tpublic midiSetChannelType(chan: number, isDrum: boolean) {\n\t\tMethodMessaging.postCall(this._messaging!, 'midiSetChannelType', [chan, isDrum]);\n\t}\n\n\tpublic resetPlayer() {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'resetPlayer', []);\n\t}\n\n\tpublic closePlayer() {\n\t\tMethodMessaging.postCall(this._messaging!, 'closePlayer', []);\n\t}\n\n\tpublic isPlayerPlaying() {\n\t\treturn this._status.playerPlaying;\n\t}\n\n\tpublic addSMFDataToPlayer(bin: ArrayBuffer) {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'addSMFDataToPlayer', [bin]);\n\t}\n\n\tpublic playPlayer() {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'playPlayer', []);\n\t}\n\n\tpublic stopPlayer() {\n\t\tMethodMessaging.postCall(this._messaging!, 'stopPlayer', []);\n\t}\n\n\tpublic retrievePlayerCurrentTick(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'retrievePlayerCurrentTick', []);\n\t}\n\tpublic retrievePlayerTotalTicks(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'retrievePlayerTotalTicks', []);\n\t}\n\tpublic retrievePlayerBpm(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'retrievePlayerBpm', []);\n\t}\n\tpublic retrievePlayerMIDITempo(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'retrievePlayerMIDITempo', []);\n\t}\n\tpublic seekPlayer(ticks: number): void {\n\t\tMethodMessaging.postCall(this._messaging!, 'seekPlayer', [ticks]);\n\t}\n\n\tpublic waitForPlayerStopped() {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'waitForPlayerStopped', []);\n\t}\n\n\t/**\n\t * Creates a sequencer instance associated with this worklet node.\n\t */\n\tpublic createSequencer(): Promise<ISequencer> {\n\t\tconst channel = new MessageChannel();\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'createSequencer', [channel.port2]).then(() => {\n\t\t\treturn new WorkletSequencer(channel.port1);\n\t\t});\n\t}\n\n\t/**\n\t * Hooks MIDI events sent by the player. The hook callback function defined on\n\t * AudioWorkletGlobalScope object available in the worklet is used.\n\t * @param callbackName hook callback function name available as 'AudioWorkletGlobalScope[callbackName]',\n\t *     or falsy value ('', null, or undefined) to unhook.\n\t *     The type of 'AudioWorkletGlobalScope[callbackName]' must be HookMIDIEventCallback.\n\t * @param param any additional data passed to the callback.\n\t *     This data must be 'Transferable' data.\n\t * @return Promise object that resolves when succeeded, or rejects when failed\n\t */\n\tpublic hookPlayerMIDIEventsByName(callbackName: string | null | undefined, param?: any): Promise<void> {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'hookPlayerMIDIEventsByName', [callbackName, param]);\n\t}\n\n\t/**\n\t * Registers the user-defined client to the sequencer.\n\t * The client callback function defined on AudioWorkletGlobalScope\n\t * object available in the worklet is used.\n\t * The client can receive events in the time from sequencer process.\n\t * @param seq the sequencer instance created by AudioWorkletNodeSynthesizer.createSequencer\n\t * @param clientName the client name\n\t * @param callbackName callback function name available as 'AudioWorkletGlobalScope[callbackName]',\n\t *     or falsy value ('', null, or undefined) to unhook.\n\t *     The type of 'AudioWorkletGlobalScope[callbackName]' must be SequencerClientCallback.\n\t * @param param additional parameter passed to the callback\n\t * @return Promise object that resolves with registered client id when succeeded, or rejects when failed\n\t */\n\tpublic registerSequencerClientByName(seq: ISequencer, clientName: string, callbackName: string, param: number): Promise<number> {\n\t\tif (!(seq instanceof WorkletSequencer)) {\n\t\t\treturn Promise.reject(new TypeError('Invalid sequencer object'));\n\t\t}\n\t\treturn seq.registerSequencerClientByName(clientName, callbackName, param);\n\t}\n\n\t/**\n\t * Call a function defined in the AudioWorklet.\n\t *\n\t * The function will receive two parameters; the first parameter is a Synthesizer instance\n\t * (not AudioWorkletNodeSynthesizer instance), and the second is the data passed to 'param'.\n\t * This method is useful when the script loaded in AudioWorklet wants to\n\t * retrieve Synthesizer instance.\n\t *\n\t * @param name a function name (must be retrieved from AudioWorkletGlobalScope[name])\n\t * @param param any parameter (must be Transferable)\n\t * @return Promise object that resolves when the function process has done, or rejects when failed\n\t */\n\tpublic callFunction(name: string, param: any) {\n\t\treturn MethodMessaging.postCallWithPromise<void>(this._messaging!, 'callFunction', [name, param]);\n\t}\n\n\t/** @internal */\n\tpublic _getRawSynthesizer(): Promise<number> {\n\t\treturn MethodMessaging.postCallWithPromise<number>(this._messaging!, 'getRawSynthesizer', []);\n\t}\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","SequencerEventData","constructor","_ptr","_module","getRaw","dispose","getType","_fluid_event_get_type","getSource","_fluid_event_get_source","getDest","_fluid_event_get_dest","getChannel","_fluid_event_get_channel","getKey","_fluid_event_get_key","getVelocity","_fluid_event_get_velocity","getControl","_fluid_event_get_control","getValue","_fluid_event_get_value","getProgram","_fluid_event_get_program","getData","_fluid_event_get_data","getDuration","_fluid_event_get_duration","getBank","_fluid_event_get_bank","getPitch","_fluid_event_get_pitch","getSFontId","_fluid_event_get_sfont_id","AudioWorkletGlobalScope","wasmModule","Module","rewriteEventDataImpl","ev","event","type","_fluid_event_note","channel","vel","duration","_fluid_event_noteon","_fluid_event_noteoff","_fluid_event_all_sounds_off","_fluid_event_all_notes_off","_fluid_event_bank_select","bank","_fluid_event_program_change","preset","_fluid_event_program_select","sfontId","_fluid_event_control_change","control","_fluid_event_pitch_bend","_fluid_event_pitch_wheelsens","_fluid_event_modulation","_fluid_event_sustain","_fluid_event_pan","_fluid_event_volume","_fluid_event_reverb_send","_fluid_event_chorus_send","_fluid_event_key_pressure","_fluid_event_channel_pressure","_fluid_event_system_reset","_fluid_event_timer","data","rewriteEventData","MessageError","Error","baseName","message","detail","super","stack","MIDIEvent","_fluid_midi_event_get_type","setType","_fluid_midi_event_set_type","_fluid_midi_event_get_channel","setChannel","_fluid_midi_event_set_channel","_fluid_midi_event_get_key","setKey","_fluid_midi_event_set_key","_fluid_midi_event_get_velocity","setVelocity","_fluid_midi_event_set_velocity","_fluid_midi_event_get_control","setControl","_fluid_midi_event_set_control","_fluid_midi_event_get_value","setValue","_fluid_midi_event_set_value","_fluid_midi_event_get_program","setProgram","_fluid_midi_event_set_program","_fluid_midi_event_get_pitch","setPitch","_fluid_midi_event_set_pitch","setSysEx","size","byteLength","ptr","_malloc","Uint8Array","HEAPU8","buffer","set","_fluid_midi_event_set_sysex","setText","_fluid_midi_event_set_text","setLyrics","_fluid_midi_event_set_lyrics","_removeFunction","fluid_sequencer_get_client_name","fluid_sfont_get_name","fluid_preset_get_name","_addFunction","_fs","fluid_settings_setint","fluid_settings_setnum","fluid_settings_setstr","fluid_synth_error","fluid_synth_sfload","fluid_sequencer_register_client","malloc","free","defaultMIDIEventCallback","promiseWaitForInitialized","makeEvent","_new_fluid_event","_delete_fluid_event","Sequencer","wasmRemoveFunction","removeFunction","cwrap","_seq","_seqId","_clientFuncMap","_initialize","close","_new_fluid_sequencer2","Promise","resolve","keys","forEach","clientIdStr","unregisterClient","Number","_delete_fluid_sequencer","registerSynthesizer","synth","val","_fluid_sequencer_unregister_client","Synthesizer","reject","TypeError","getRawSynthesizer","_fluid_sequencer_register_fluidsynth","clientId","_fluid_event_set_source","_fluid_event_set_dest","_fluid_event_unregistering","_fluid_sequencer_send_now","map","getAllRegisteredClients","c","_fluid_sequencer_count_clients","r","i","id","_fluid_sequencer_get_client_id","name","push","getClientCount","getClientInfo","index","setTimeScale","scale","_fluid_sequencer_set_time_scale","getTimeScale","_fluid_sequencer_get_time_scale","getTick","_fluid_sequencer_get_tick","sendEventAt","tick","isAbsolute","count","_fluid_sequencer_send_at","sendEventToClientAt","sendEventToClientNow","sendEventNow","eventData","removeAllEvents","_fluid_sequencer_remove_events","removeAllEventsFromClient","processSequencer","msecToProcess","_fluid_sequencer_process","setIntervalForSequencer","msec","setInterval","Soundfont","sfontPtr","static","sfont","_fluid_synth_get_sfont_by_id","getName","getPreset","presetNum","presetPtr","_fluid_sfont_get_preset","soundfont","bankNum","_fluid_preset_get_banknum","num","_fluid_preset_get_num","getPresetIterable","reset","_fluid_sfont_iteration_start","next","_fluid_sfont_iteration_next","done","undefined","iterator","wasmAddFunction","addFunction","FS","bind","_free","_fluid_synth_handle_midi_event","setBoolValueForSettings","settings","setIntValueForSettings","setNumValueForSettings","_settings","_synth","_player","_playerPlaying","_playerCallbackPtr","_fluidSynthCallback","_buffer","_bufferSize","_numPtr","_gain","mod","addOnPostRunFn","addOnPostRun","calledRun","fn","onRuntimeInitialized","waitForInitialized","isInitialized","createAudioNode","context","frameSize","node","createScriptProcessor","addEventListener","render","outputBuffer","init","sampleRate","_new_fluid_settings","initialGain","chorusActive","chorusDepth","chorusLevel","chorusNr","chorusSpeed","midiChannelCount","setStrValueForSettings","midiBankSelect","minNoteLength","overflowAge","overflowImportantValue","overflowImportantChannels","join","overflowPercussion","overflowReleased","overflowSustained","overflowVolume","polyphony","reverbActive","reverbDamp","reverbLevel","reverbRoomSize","reverbWidth","_new_fluid_synth","_closePlayer","_delete_fluid_synth","_delete_fluid_settings","isPlaying","actualCount","_fluid_synth_get_active_voice_count","baseOffsetOfVoice","offsetOfActiveVoiceCount","structActiveVoiceCount","HEAPU32","console","warn","voiceList","voiceCount","_fluid_synth_get_polyphony","isRunning","voice","getActiveVoiceCount","setInterpolation","ensureInitialized","_fluid_synth_set_interp_method","getGain","setGain","gain","_fluid_synth_set_gain","_fluid_synth_get_gain","setChannelType","isDrum","_fluid_synth_set_channel_type","waitForVoicesStopped","flushFramesAsync","loadSFont","bin","ext","Math","random","ub","writeFile","unlink","unloadSFont","stopPlayer","flushFramesSync","_fluid_synth_sfunload","unloadSFontAsync","then","getSFontObject","getSoundfontById","getSFontBankOffset","_fluid_synth_get_bank_offset","setSFontBankOffset","offset","_fluid_synth_set_bank_offset","outBuffer","frameCount","length","channels","numberOfChannels","sizePerChannel","totalSize","memLeft","memRight","renderRaw","aLeft","Float32Array","aRight","copyToChannel","leftData","getChannelData","rightData","isPlayerPlaying","midiNoteOn","chan","_fluid_synth_noteon","midiNoteOff","_fluid_synth_noteoff","midiKeyPressure","_fluid_synth_key_pressure","midiControl","ctrl","_fluid_synth_cc","midiProgramChange","prognum","_fluid_synth_program_change","midiChannelPressure","_fluid_synth_channel_pressure","midiPitchBend","_fluid_synth_pitch_bend","midiSysEx","len","mem","_fluid_synth_sysex","midiPitchWheelSensitivity","_fluid_synth_pitch_wheel_sens","_fluid_synth_bank_select","midiSFontSelect","_fluid_synth_sfont_select","midiProgramSelect","_fluid_synth_program_select","midiUnsetProgram","_fluid_synth_unset_program","midiProgramReset","_fluid_synth_program_reset","midiSystemReset","_fluid_synth_system_reset","midiAllNotesOff","_fluid_synth_all_notes_off","midiAllSoundsOff","_fluid_synth_all_sounds_off","midiSetChannelType","setReverb","roomsize","damping","width","level","_fluid_synth_set_reverb","setReverbRoomsize","_fluid_synth_set_reverb_roomsize","setReverbDamp","_fluid_synth_set_reverb_damp","setReverbWidth","_fluid_synth_set_reverb_width","setReverbLevel","_fluid_synth_set_reverb_level","setReverbOn","on","_fluid_synth_set_reverb_on","getReverbRoomsize","_fluid_synth_get_reverb_roomsize","getReverbDamp","_fluid_synth_get_reverb_damp","getReverbLevel","_fluid_synth_get_reverb_level","getReverbWidth","_fluid_synth_get_reverb_width","setChorus","speed","depthMillisec","_fluid_synth_set_chorus","setChorusVoiceCount","_fluid_synth_set_chorus_nr","setChorusLevel","_fluid_synth_set_chorus_level","setChorusSpeed","_fluid_synth_set_chorus_speed","setChorusDepth","_fluid_synth_set_chorus_depth","setChorusType","_fluid_synth_set_chorus_type","setChorusOn","_fluid_synth_set_chorus_on","getChorusVoiceCount","_fluid_synth_get_chorus_nr","getChorusLevel","_fluid_synth_get_chorus_level","getChorusSpeed","_fluid_synth_get_chorus_speed","getChorusDepth","_fluid_synth_get_chorus_depth","getChorusType","_fluid_synth_get_chorus_type","getGenerator","param","_fluid_synth_get_gen","setGenerator","_fluid_synth_set_gen","getLegatoMode","_fluid_synth_get_legato_mode","HEAP32","setLegatoMode","mode","_fluid_synth_set_legato_mode","getPortamentoMode","_fluid_synth_get_portamento_mode","setPortamentoMode","_fluid_synth_set_portamento_mode","getBreathMode","_fluid_synth_get_breath_mode","setBreathMode","flags","_fluid_synth_set_breath_mode","resetPlayer","_initPlayer","closePlayer","player","_new_fluid_player","funcPtr","p","_delete_fluid_player","_fluid_player_get_status","addSMFDataToPlayer","ensurePlayerInitialized","_fluid_player_add_mem","playPlayer","_fluid_player_play","resolver","_playerDefer","promise","_fluid_player_stop","_fluid_player_join","retrievePlayerCurrentTick","_fluid_player_get_current_tick","retrievePlayerTotalTicks","_fluid_player_get_total_ticks","retrievePlayerBpm","_fluid_player_get_bpm","retrievePlayerMIDITempo","_fluid_player_get_midi_tempo","seekPlayer","ticks","_fluid_player_seek","hookPlayerMIDIEvents","callback","oldPtr","newPtr","cb","t","makeMIDIEventCallback","_fluid_player_set_playback_callback","_fluid_synth_write_float","nextFrame","setTimeout","head","tail","self","waitForPlayerStopped","seq","time","e","waitForReady","waitForWasmInitialized","initializeCallPort","port","hookMessage","instance","defers","deferId","hook","defer","error","makeMessageError","processReturnMessage","start","postCall","method","args","postMessage","postCallWithPromise","Infinity","transfers","MessagePort","WorkletSoundfont","_messaging","WorkletSequencer","registerSequencerClientByName","clientName","callbackName","seqPtr","AudioWorkletNodeSynthesizer","_getRawSynthesizer","v","_status","playing","playerPlaying","_node","AudioWorkletNode","numberOfInputs","numberOfOutputs","channelCount","outputChannelCount","processorOptions","_sampleRate","MessageChannel","port2","port1","createSequencer","hookPlayerMIDIEventsByName","callFunction"],"sourceRoot":""}